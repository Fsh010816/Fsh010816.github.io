{
    "version": "https://jsonfeed.org/version/1",
    "title": "Fsh",
    "description": "",
    "home_page_url": "http://Fsh010816.github.io",
    "items": [
        {
            "id": "http://fsh010816.github.io/2021/02/01/11-java-ji-he/",
            "url": "http://fsh010816.github.io/2021/02/01/11-java-ji-he/",
            "title": "11-Java集合",
            "date_published": "2021-02-01T08:09:08.000Z",
            "content_html": "<h1 id=\"java集合\"><a class=\"markdownIt-Anchor\" href=\"#java集合\">#</a> Java 集合</h1>\n<h2 id=\"集合框架的概述\"><a class=\"markdownIt-Anchor\" href=\"#集合框架的概述\">#</a> 集合框架的概述</h2>\n<h3 id=\"集合概述\"><a class=\"markdownIt-Anchor\" href=\"#集合概述\">#</a> 集合概述</h3>\n<p>集合、数组都是对多个数据进行存储操作的结构，简称 Java 容器。</p>\n<p>说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt,.jpg,.avi，数据库中）</p>\n<p>在 Java5 之前，Java 集合会丢失容器中所有对象的数据类型，把所有对象都当成 Object 类型处理；从 JDK 5.0 增加了 泛型以后，Java 集合可以记住容器中对象的数据类型</p>\n<h3 id=\"数组优缺点\"><a class=\"markdownIt-Anchor\" href=\"#数组优缺点\">#</a> 数组优缺点</h3>\n<p>①数组在存储多个数据方面的特点：</p>\n<p>1. 一旦初始化以后，其长度就确定了。</p>\n<p>2. 数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。</p>\n<p>比如：String [] arr;int [] arr1;Object [] arr2;</p>\n<p>②数组在存储多个数据方面的缺点：</p>\n<p>1. 一旦初始化以后，其长度就不可修改。</p>\n<p>2. 数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。</p>\n<p>3. 获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</p>\n<p>4. 数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。</p>\n<h3 id=\"集合框架\"><a class=\"markdownIt-Anchor\" href=\"#集合框架\">#</a> 集合框架</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n *      |----Collection接口：单列集合，用来存储一个一个的对象\n *          |----List接口：存储有序的、可重复的数据。  --&gt;“动态”数组\n *              |----ArrayList、LinkedList、Vector\n *\n *          |----Set接口：存储无序的、不可重复的数据   --&gt;高中讲的“集合”\n *              |----HashSet、LinkedHashSet、TreeSet\n *\n *      |----Map接口：双列集合，用来存储一对(key - value)一对的数据   --&gt;高中函数：y = f(x)\n *              |----HashMap、LinkedHashMap、TreeMap、Hashtable、Properties\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2021/01/31/10-mei-ju-lei-yu-zhu-jie/",
            "url": "http://fsh010816.github.io/2021/01/31/10-mei-ju-lei-yu-zhu-jie/",
            "title": "10-枚举类与注解",
            "date_published": "2021-01-31T10:48:35.000Z",
            "content_html": "<h1 id=\"枚举类与注解\"><a class=\"markdownIt-Anchor\" href=\"#枚举类与注解\">#</a> 枚举类与注解</h1>\n<h2 id=\"枚举类\"><a class=\"markdownIt-Anchor\" href=\"#枚举类\">#</a> 枚举类</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 一、枚举类的使用\n * 1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类\n * 2.当需要定义一组常量时，强烈建议使用枚举类\n * 3.如果枚举类中只有一个对象，则可以作为单例模式的实现方式。\n *\n * 二、如何定义枚举类\n * 方式一：jdk5.0之前，自定义枚举类\n * 方式二：jdk5.0，可以使用enum关键字定义枚举类\n *\n * 三、Enum类中的常用方法：\n *    values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。\n *    valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。\n *    toString()：返回当前枚举类对象常量的名称\n *\n * 四、使用enum关键字定义的枚举类实现接口的情况\n *   情况一：实现接口，在enum类中实现抽象方法\n *   情况二：让枚举类的对象分别实现接口中的抽象方法\n *\n * @author shkstart\n * @create 2019 上午 10:17\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SeasonTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Season</span> spring <span class=\"token operator\">=</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">.</span>SPRING<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>spring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//自定义枚举类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//1.声明Season对象的属性:private final修饰</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//2.私有化类的构造器,并给对象属性赋值</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seasonName <span class=\"token operator\">=</span> seasonName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seasonDesc <span class=\"token operator\">=</span> seasonDesc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//3.提供当前枚举类的多个对象：public static final的</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Season</span> SPRING <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"春暖花开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Season</span> SUMMER <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"夏日炎炎\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Season</span> AUTUMN <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"秋高气爽\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Season</span> WINTER <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"冰天雪地\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//4.其他诉求1：获取枚举类对象的属性</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSeasonName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> seasonName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSeasonDesc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> seasonDesc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//4.其他诉求1：提供toString()</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Season{\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"seasonName='\"</span> <span class=\"token operator\">+</span> seasonName <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", seasonDesc='\"</span> <span class=\"token operator\">+</span> seasonDesc <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 使用enum关键字定义枚举类\n * 说明：定义的枚举类默认继承于java.lang.Enum类，因此不能再继承其他类\n *JDK 1.5 中可以在 switch 表达式中使用Enum定义的枚举类的对象作为表达式, case 子句可\n *以直接使用枚举值的名字, 无需添加枚举类作为限定。\n * @author shkstart\n * @create 2019 上午 10:35\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SeasonTest1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Season1</span> summer <span class=\"token operator\">=</span> <span class=\"token class-name\">Season1</span><span class=\"token punctuation\">.</span>SUMMER<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//toString():返回枚举类对象的名称</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>summer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        System.out.println(Season1.class.getSuperclass());</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//values():返回所有的枚举类对象构成的数组</span>\n        <span class=\"token class-name\">Season1</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values <span class=\"token operator\">=</span> <span class=\"token class-name\">Season1</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> values1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>values1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span>\n        <span class=\"token class-name\">Season1</span> winter <span class=\"token operator\">=</span> <span class=\"token class-name\">Season1</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WINTER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//如果没有objName的枚举类对象，则抛异常：IllegalArgumentException</span>\n<span class=\"token comment\">//        Season1 winter = Season1.valueOf(\"WINTER1\");</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>winter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        winter<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//使用enum关键字枚举类</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//1.提供当前枚举类的对象，多个对象之间用\",\"隔开，末尾对象\";\"结束</span>\n    <span class=\"token function\">SPRING</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"春暖花开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天在哪里？\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">SUMMER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"夏日炎炎\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"宁夏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">AUTUMN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"秋高气爽\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天不回来\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">WINTER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"冰天雪地\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大约在冬季\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//2.声明Season对象的属性:private final修饰</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//2.私有化类的构造器,并给对象属性赋值</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Season1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seasonName <span class=\"token operator\">=</span> seasonName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seasonDesc <span class=\"token operator\">=</span> seasonDesc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//4.其他诉求1：获取枚举类对象的属性</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSeasonName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> seasonName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSeasonDesc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> seasonDesc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//    //4.其他诉求1：提供toString()</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//    @Override</span>\n<span class=\"token comment\">//    public String toString() {</span>\n<span class=\"token comment\">//        return \"Season1{\" +</span>\n<span class=\"token comment\">//                \"seasonName='\" + seasonName + '\\'' +</span>\n<span class=\"token comment\">//                \", seasonDesc='\" + seasonDesc + '\\'' +</span>\n<span class=\"token comment\">//                '}';</span>\n<span class=\"token comment\">//    }</span>\n\n\n<span class=\"token comment\">//    @Override</span>\n<span class=\"token comment\">//    public void show() {</span>\n<span class=\"token comment\">//        System.out.println(\"这是一个季节\");</span>\n<span class=\"token comment\">//    }</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"注解\"><a class=\"markdownIt-Anchor\" href=\"#注解\">#</a> 注解</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 注解的使用\n *\n * 1. 理解Annotation:\n * ① jdk 5.0 新增的功能\n *\n * ② Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation,\n * 程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。\n *\n * ③在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android\n * 中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗\n * 代码和XML配置等。\n *\n * 2. Annocation的使用示例\n * 示例一：生成文档相关的注解\n * 示例二：在编译时进行格式检查(JDK内置的三个基本注解)\n     @Override: 限定重写父类方法, 该注解只能用于方法\n     @Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择\n     @SuppressWarnings: 抑制编译器警告\n\n  * 示例三：跟踪代码依赖性，实现替代配置文件功能\n  *\n  * 3. 如何自定义注解：参照@SuppressWarnings定义\n      * ① 注解声明为：@interface\n      * ② 内部定义成员，通常使用value表示\n      * ③ 可以指定成员的默认值，使用default定义\n      * ④ 如果自定义注解没有成员，表明是一个标识作用。\n\t  * ⑤Annotation 的成员变量在 Annotation 定义中以无参数方法的形式来声明。其\n\t  方法名和返回值定义了该成员的名字和类型。我们称为配置参数。类型只能\n      是八种基本数据类型、String 类型 、Class 类型 、enum 类型 、Annotation 类型 、\n      以上所有类型的数组。\n\n     如果注解有成员，在使用注解时，需要指明成员的值。\n     自定义注解必须配上注解的信息处理流程(使用反射)才有意义。\n     自定义注解通过都会指明两个元注解：Retention、Target\n\n     4. jdk 提供的4种元注解\n       元注解：对现有的注解进行解释说明的注解\n     Retention：指定所修饰的 Annotation 的生命周期：SOURCE\\CLASS（默认行为）\\RUNTIME\n            只有声明为RUNTIME生命周期的注解，才能通过反射获取。\n     Target:用于指定被修饰的 Annotation 能用于修饰哪些程序元素\n     *******出现的频率较低*******\n     Documented:表示所修饰的注解在被javadoc解析时，保留下来。定义为Documented的注解必须设置Retention值为RUNTIME\n     Inherited:被它修饰的 Annotation 将具有继承性。\n\n     5.通过反射获取注解信息 ---到反射内容时系统讲解\n\n     6. jdk 8 中注解的新特性：可重复注解、类型注解\n\n     6.1 可重复注解：① 在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class\n                    ② MyAnnotation的Target和Retention等元注解与MyAnnotations相同。\n\n     6.2 类型注解：\n     ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明）。\n     ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。\n\n      *\n * @author shkstart\n * @create 2019 上午 11:37\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2021/01/30/9-java-chang-yong-lei/",
            "url": "http://fsh010816.github.io/2021/01/30/9-java-chang-yong-lei/",
            "title": "9-Java常用类",
            "date_published": "2021-01-30T03:38:03.000Z",
            "content_html": "<h1 id=\"java常用类\"><a class=\"markdownIt-Anchor\" href=\"#java常用类\">#</a> Java 常用类</h1>\n<p>String\\StringBuffer 转换</p>\n<h2 id=\"字符串相关的类\"><a class=\"markdownIt-Anchor\" href=\"#字符串相关的类\">#</a> 字符串相关的类</h2>\n<h3 id=\"string\"><a class=\"markdownIt-Anchor\" href=\"#string\">#</a> String</h3>\n<h4 id=\"string字符串使用一对引起来表示\"><a class=\"markdownIt-Anchor\" href=\"#string字符串使用一对引起来表示\">#</a> String: 字符串，使用一对 \"\" 引起来表示。</h4>\n<p>1.String 声明为 final 的，不可被继承</p>\n<p>2.String 实现了 Serializable 接口：表示字符串是支持序列化的。</p>\n<p>​\t\t\t实现了 Comparable 接口：表示 String 可以比较大小</p>\n<p>3.String 内部定义了 final char [] value 用于存储字符串数据</p>\n<p>4.String: 代表不可变的字符序列。简称：不可变性。</p>\n<p>​\t\t体现：1. 当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的 value 进行赋值。</p>\n<p>​                2. 当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的 value 进行赋值。</p>\n<p>​\t\t\t\t3. 当调用 String 的 replace () 方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的 value 进行赋值。</p>\n<p>5. 通过字面量的方式（区别于 new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。</p>\n<p>6. 字符串常量池中是不会存储相同内容的字符串的。</p>\n<h4 id=\"string的实例化方式\"><a class=\"markdownIt-Anchor\" href=\"#string的实例化方式\">#</a> String 的实例化方式：</h4>\n<p>方式一：通过字面量定义的方式</p>\n<p>方式二：通过 new + 构造器的方式</p>\n<p>面试题：String s = new String (“abc”); 方式创建对象，在内存中创建了几个对象？<br>\n两个：一个是堆空间中 new 结构，另一个是 char [] 对应的常量池中的数据：“abc”</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。</span>\n<span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"javaEE\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"javaEE\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。</span>\n<span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javaEE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>1. 常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。<br>\n2. 只要其中有一个是变量，结果就在堆中。<br>\n3. 如果拼接的结果调用 intern () 方法，返回值就在常量池中</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2021013117230495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<h4 id=\"string常用方法\"><a class=\"markdownIt-Anchor\" href=\"#string常用方法\">#</a> String 常用方法</h4>\n<p><strong>int length()</strong>：返回字符串的长度： return value.length<br>\n<strong>char charAt(int index)</strong>： 返回某索引处的字符 return value [index]<br>\n<strong>boolean isEmpty()</strong>：判断是否是空字符串：return value.length == 0<br>\n<strong>String toLowerCase()</strong>：使用默认语言环境，将 String 中的所有字符转换为小写<br>\n<strong> String toUpperCase ()</strong>：使用默认语言环境，将 String 中的所有字符转换为大写<br>\n<strong> String trim ()</strong>：返回字符串的副本，忽略前导空白和尾部空白<br>\n<strong> boolean equals (Object obj)</strong>：比较字符串的内容是否相同<br>\n<strong> boolean equalsIgnoreCase (String anotherString)</strong>：与 equals 方法类似，忽略大小写<br>\n<strong> String concat (String str)</strong>：将指定字符串连接到此字符串的结尾。 等价于用 “+”<br>\n<strong>int compareTo(String anotherString)</strong>：比较两个字符串的大小<br>\n<strong> String substring (int beginIndex)</strong>：返回一个新的字符串，它是此字符串的从 beginIndex 开始截取到最后的一个子字符串。<br>\n<strong>String substring(int beginIndex, int endIndex)</strong> ：返回一个新字符串，它是此字符串从 beginIndex 开始截取到 endIndex (不包含) 的一个子字符串。</p>\n<p><strong>boolean endsWith(String suffix)</strong>：测试此字符串是否以指定的后缀结束<br>\n<strong> boolean startsWith (String prefix)</strong>：测试此字符串是否以指定的前缀开始<br>\n<strong> boolean startsWith (String prefix, int toffset)</strong>：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</p>\n<p><strong>boolean contains(CharSequence s)</strong>：当且仅当此字符串包含指定的 char 值序列时，返回 true<br>\n<strong>int indexOf(String str)</strong>：返回指定子字符串在此字符串中第一次出现处的索引<br>\n<strong> int indexOf (String str, int fromIndex)</strong>：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始<br>\n<strong> int lastIndexOf (String str)</strong>：返回指定子字符串在此字符串中最右边出现处的索引<br>\n<strong> int lastIndexOf (String str, int fromIndex)</strong>：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</p>\n<p>注：indexOf 和 lastIndexOf 方法如果未找到都是返回 - 1</p>\n<p><strong>替换</strong>：<br>\n<strong>String replace(char oldChar, char newChar)</strong>：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。<br>\n<strong>String replace(CharSequence target, CharSequence replacement)</strong>：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。<br>\n<strong>String replaceAll(String regex, String replacement)</strong>：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。<br>\n<strong>String replaceFirst(String regex, String replacement)</strong>：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。<br>\n<strong>匹配</strong>:<br>\n<strong>boolean matches(String regex)</strong>：告知此字符串是否匹配给定的正则表达式。<br>\n<strong>切片</strong>：<br>\n<strong>String[] split(String regex)</strong>：根据给定正则表达式的匹配拆分此字符串。<br>\n<strong>String[] split(String regex, int limit)</strong>：根据匹配给定的正则表达式来拆分此字符串，最多不超过 limit 个，如果超过了，剩下的全部都放到最后一个元素中。</p>\n<h4 id=\"string-与字符数组转换\"><a class=\"markdownIt-Anchor\" href=\"#string-与字符数组转换\">#</a> String 与字符数组转换</h4>\n<p>String 与 char [] 之间的转换</p>\n<p>String --&gt; char []: 调用 String 的<strong> toCharArray ()</strong></p>\n<p>​\t\t\t\t\t\t\t<strong>public void getChars(int srcBegin, int srcEnd, char[] dst,int dstBegin)</strong> ：提供了将指定索引范围内的字符串存放到数组中的方法<br>\n char [] --&gt; String: 调用 String 的构造器 <strong>String(char[])</strong> 和 和 <strong>String(char[] ，int offset ，int length)</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc123\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> str9 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nstr1<span class=\"token punctuation\">.</span><span class=\"token function\">getChars</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>str9<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> charArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"string与字节数组转换\"><a class=\"markdownIt-Anchor\" href=\"#string与字节数组转换\">#</a> String 与字节数组转换</h4>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n    String 与 byte[]之间的转换\n    编码：String --&gt; byte[]:调用String的getBytes()\n    解码：byte[] --&gt; String:调用String的构造器\n    \tString(byte[])\n    \tString(byte[] ，int offset ，int length)\n\n    编码：字符串 --&gt;字节  (看得懂 ---&gt;看不懂的二进制数据)\n    解码：编码的逆过程，字节 --&gt; 字符串 （看不懂的二进制数据 ---&gt; 看得懂）\n\n    说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。\n     */</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc123中国\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用默认的字符集，进行编码。</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> gbks <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gbk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用gbk字符集进行编码。</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>gbks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"******************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用默认的字符集，进行解码。</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>gbks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//出现乱码。原因：编码集和解码集不一致！</span>\n\n\n    <span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>gbks<span class=\"token punctuation\">,</span> <span class=\"token string\">\"gbk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//没有出现乱码。原因：编码集和解码集一致！</span>\n\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"stringbuffer-stringbuilder\"><a class=\"markdownIt-Anchor\" href=\"#stringbuffer-stringbuilder\">#</a> StringBuffer、StringBuilder</h3>\n<p>对比 String、StringBuffer、StringBuilder 三者的效率：<br>\n从高到低排列：StringBuilder &gt; StringBuffer &gt; String</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\nString、StringBuffer、StringBuilder三者的异同？\nString:不可变的字符序列；底层使用char[]存储\nStringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储\nStringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储\n\n源码分析：\nString str = new String();//char[] value = new char[0];\nString str1 = new String(\"abc\");//char[] value = new char[]{'a','b','c'};\n\nStringBuffer sb1 = new StringBuffer();//char[] value = new char[16];底层创建了一个长度是16的数组。\nSystem.out.println(sb1.length());//\nsb1.append('a');//value[0] = 'a';\nsb1.append('b');//value[1] = 'b';\n\nStringBuffer sb2 = new StringBuffer(\"abc\");//char[] value = new char[\"abc\".length() + 16];\n\n//问题1. System.out.println(sb2.length());//3\n//问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。\n\t\t 默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。\n\n\t\t指导意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)\n\n\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"stringbuffer的常用方法\"><a class=\"markdownIt-Anchor\" href=\"#stringbuffer的常用方法\">#</a> StringBuffer 的常用方法</h4>\n<p><strong>StringBuffer append(xxx)</strong>：提供了很多的 append () 方法，用于进行字符串拼接<br>\n<strong> StringBuffer delete (int start,int end)</strong>：删除指定位置的内容<br>\n<strong> StringBuffer replace (int start, int end, String str)</strong>：把 [start,end) 位置替换为 str<br>\n<strong>StringBuffer insert(int offset, xxx)</strong>：在指定位置插入 xxx<br>\n<strong>StringBuffer reverse()</strong> ：把当前字符序列逆转<br>\n<strong> public int indexOf (String str)</strong><br>\n<strong>public String substring(int start,int end)</strong>: 返回一个从 start 开始到 end 索引结束的左闭右开区间的子字符串<br>\n<strong> public int length ()</strong><br>\n<strong>public char charAt(int n )</strong><br>\n<strong>public void setCharAt(int n ,char ch)</strong></p>\n<h4 id=\"string和stringbuffer-stringbuilder的转换\"><a class=\"markdownIt-Anchor\" href=\"#string和stringbuffer-stringbuilder的转换\">#</a> String 和 StringBuffer、StringBuilder 的转换</h4>\n<p>String 转 StringBuffer、StringBuilder：调用 StringBuffer、StringBuilder 构造器</p>\n<p>StringBuffer、StringBuilder 转 String：①调用 String 构造器②StringBuffer、StringBuilder 的 toString ()</p>\n<h2 id=\"jdk8之前日期时间api\"><a class=\"markdownIt-Anchor\" href=\"#jdk8之前日期时间api\">#</a> JDK8 之前日期时间 API</h2>\n<h3 id=\"javalangsystem类\"><a class=\"markdownIt-Anchor\" href=\"#javalangsystem类\">#</a> java.lang.System 类</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> time <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</span>\n<span class=\"token comment\">//称为时间戳</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"javautildate类\"><a class=\"markdownIt-Anchor\" href=\"#javautildate类\">#</a> java.util.Date 类</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\njava.util.Date类\n\t   |---java.sql.Date类\n\n1.两个构造器的使用\n\t&gt;构造器一：Date()：创建一个对应当前时间的Date对象\n\t&gt;构造器二：创建指定毫秒数的Date对象\n2.两个方法的使用\n\t&gt;toString():显示当前的年、月、日、时、分、秒\n\t&gt;getTime():获取当前Date对象对应的毫秒数。（时间戳）\n\n3. java.sql.Date对应着数据库中的日期类型的变量\n\t&gt;如何实例化\n\t&gt;如何将java.util.Date对象转换为java.sql.Date对象\n */</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//构造器一：Date()：创建一个对应当前时间的Date对象</span>\n\t<span class=\"token class-name\">Date</span> date1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Sat Feb 16 16:35:31 GMT+08:00 2019</span>\n\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1550306204104</span>\n\n\t<span class=\"token comment\">//构造器二：创建指定毫秒数的Date对象</span>\n\t<span class=\"token class-name\">Date</span> date2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">155030620410L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//创建java.sql.Date对象</span>\n\tjava<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span><span class=\"token class-name\">Date</span> date3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">35235325345L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1971-02-13</span>\n\n\t<span class=\"token comment\">//如何将java.util.Date对象转换为java.sql.Date对象</span>\n\t<span class=\"token comment\">//情况一：</span>\n<span class=\"token comment\">//        Date date4 = new java.sql.Date(2343243242323L);</span>\n<span class=\"token comment\">//        java.sql.Date date5 = (java.sql.Date) date4;</span>\n\t<span class=\"token comment\">//情况二：</span>\n\t<span class=\"token class-name\">Date</span> date6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tjava<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span><span class=\"token class-name\">Date</span> date7 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>date6<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"javatextsimpledateformat类\"><a class=\"markdownIt-Anchor\" href=\"#javatextsimpledateformat类\">#</a> java.text.SimpleDateFormat 类</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\nSimpleDateFormat的使用：SimpleDateFormat对日期Date类的格式化和解析\n\n1.两个操作：\n1.1 格式化：日期 ---&gt;字符串\n1.2 解析：格式化的逆过程，字符串 ---&gt; 日期\n\n2.SimpleDateFormat的实例化\n\n */</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//实例化SimpleDateFormat:使用默认的构造器</span>\n\t<span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//格式化：日期 ---&gt;字符串</span>\n\t<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">String</span> format <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//解析：格式化的逆过程，字符串 ---&gt; 日期</span>\n\t<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"19-12-18 上午11:43\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Date</span> date1 <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//*************按照指定的方式格式化和解析：调用带参的构造器*****************</span>\n<span class=\"token comment\">//        SimpleDateFormat sdf1 = new SimpleDateFormat(\"yyyyy.MMMMM.dd GGG hh:mm aaa\");</span>\n\t<span class=\"token class-name\">SimpleDateFormat</span> sdf1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd hh:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//格式化</span>\n\t<span class=\"token class-name\">String</span> format1 <span class=\"token operator\">=</span> sdf1<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>format1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2019-02-18 11:48:27</span>\n\t<span class=\"token comment\">//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),</span>\n\t<span class=\"token comment\">//否则，抛异常</span>\n\t<span class=\"token class-name\">Date</span> date2 <span class=\"token operator\">=</span> sdf1<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-02-18 11:48:27\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>字符串 \"2020-09-08\" 转换为 java.sql.Date</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testExer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> birth <span class=\"token operator\">=</span> <span class=\"token string\">\"2020-09-08\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">SimpleDateFormat</span> sdf1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> sdf1<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>birth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//        System.out.println(date);</span>\n\n    java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span><span class=\"token class-name\">Date</span> birthDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>birthDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20210131175918479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<h3 id=\"javautilcalendar-日历类\"><a class=\"markdownIt-Anchor\" href=\"#javautilcalendar-日历类\">#</a> java.util.Calendar (日历) 类</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCalendar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//1.实例化</span>\n    <span class=\"token comment\">//方式一：创建其子类（GregorianCalendar）的对象</span>\n    <span class=\"token comment\">//方式二：调用其静态方法getInstance()</span>\n    <span class=\"token class-name\">Calendar</span> calendar <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//        System.out.println(calendar.getClass());</span>\n\n    <span class=\"token comment\">/*2.常用方法一个Calendar的实例是系统时间的抽象表示，通过get(int field)方法来取得想要的时间信息。比如YEAR、MONTH、DAY_OF_WEEK、HOUR_OF_DAY 、MINUTE、SECOND\n    */</span>\n    <span class=\"token comment\">//get()</span>\n    <span class=\"token keyword\">int</span> days <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_YEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//set()</span>\n    <span class=\"token comment\">//calendar可变性</span>\n    calendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    days <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//add()</span>\n    calendar<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    days <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//getTime():日历类---&gt; Date</span>\n    <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//setTime():Date ---&gt; 日历类</span>\n    <span class=\"token class-name\">Date</span> date1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    calendar<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    days <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"jdk8中新日期时间api\"><a class=\"markdownIt-Anchor\" href=\"#jdk8中新日期时间api\">#</a> JDK8 中新日期时间 API</h2>\n<h3 id=\"localdate-localtime-localdatetime-的使用\"><a class=\"markdownIt-Anchor\" href=\"#localdate-localtime-localdatetime-的使用\">#</a> LocalDate、LocalTime、LocalDateTime 的使用</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\nLocalDate、LocalTime、LocalDateTime 的使用\n说明：\n\t1.LocalDateTime相较于LocalDate、LocalTime，使用频率要高\n\t2.类似于Calendar\n */</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//now():获取当前的日期、时间、日期+时间</span>\n\t<span class=\"token class-name\">LocalDate</span> localDate <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">LocalTime</span> localTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">LocalDateTime</span> localDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//of():设置指定的年、月、日、时、分、秒。没有偏移量</span>\n\t<span class=\"token class-name\">LocalDateTime</span> localDateTime1 <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\">//getXxx()：获取相关的属性</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfWeek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getMonthValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getMinute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//体现不可变性</span>\n\t<span class=\"token comment\">//withXxx():设置相关的属性</span>\n\t<span class=\"token class-name\">LocalDate</span> localDate1 <span class=\"token operator\">=</span> localDate<span class=\"token punctuation\">.</span><span class=\"token function\">withDayOfMonth</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDate1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token class-name\">LocalDateTime</span> localDateTime2 <span class=\"token operator\">=</span> localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">withHour</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//不可变性</span>\n\t<span class=\"token class-name\">LocalDateTime</span> localDateTime3 <span class=\"token operator\">=</span> localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">plusMonths</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">LocalDateTime</span> localDateTime4 <span class=\"token operator\">=</span> localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">minusDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"instant的使用\"><a class=\"markdownIt-Anchor\" href=\"#instant的使用\">#</a> Instant 的使用</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\nInstant的使用\n类似于 java.util.Date类\n\n */</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//now():获取本初子午线对应的标准时间</span>\n\t<span class=\"token class-name\">Instant</span> instant <span class=\"token operator\">=</span> <span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2019-02-18T07:29:41.719Z</span>\n\n\t<span class=\"token comment\">//添加时间的偏移量</span>\n\t<span class=\"token class-name\">OffsetDateTime</span> offsetDateTime <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">atOffset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneOffset</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>offsetDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2019-02-18T15:32:50.611+08:00</span>\n\n\t<span class=\"token comment\">//toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---&gt; Date类的getTime()</span>\n\t<span class=\"token keyword\">long</span> milli <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">toEpochMilli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>milli<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//ofEpochMilli():通过给定的毫秒数，获取Instant实例  --&gt;Date(long millis)</span>\n\t<span class=\"token class-name\">Instant</span> instant1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofEpochMilli</span><span class=\"token punctuation\">(</span><span class=\"token number\">1550475314878L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instant1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"datetimeformatter格式化或解析日期-时间\"><a class=\"markdownIt-Anchor\" href=\"#datetimeformatter格式化或解析日期-时间\">#</a> DateTimeFormatter: 格式化或解析日期、时间</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\nDateTimeFormatter:格式化或解析日期、时间\n类似于SimpleDateFormat\n\n */</span>\n\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//        方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span>\n\t<span class=\"token class-name\">DateTimeFormatter</span> formatter <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span>ISO_LOCAL_DATE_TIME<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//格式化:日期--&gt;字符串</span>\n\t<span class=\"token class-name\">LocalDateTime</span> localDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> formatter<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2019-02-18T15:42:18.797</span>\n\n\t<span class=\"token comment\">//解析：字符串 --&gt;日期</span>\n\t<span class=\"token class-name\">TemporalAccessor</span> parse <span class=\"token operator\">=</span> formatter<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2019-02-18T15:42:18.797\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>parse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//        方式二：</span>\n<span class=\"token comment\">//        本地化相关的格式。如：ofLocalizedDateTime()</span>\n<span class=\"token comment\">//        FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span>\n\t<span class=\"token class-name\">DateTimeFormatter</span> formatter1 <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofLocalizedDateTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FormatStyle</span><span class=\"token punctuation\">.</span>LONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//格式化</span>\n\t<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> formatter1<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2019年2月18日 下午03时47分16秒</span>\n\n\n<span class=\"token comment\">//      本地化相关的格式。如：ofLocalizedDate()</span>\n<span class=\"token comment\">//      FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span>\n\t<span class=\"token class-name\">DateTimeFormatter</span> formatter2 <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofLocalizedDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FormatStyle</span><span class=\"token punctuation\">.</span>MEDIUM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//格式化</span>\n\t<span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> formatter2<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2019-2-18</span>\n\n\n<span class=\"token comment\">//       重点： 方式三：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</span>\n\t<span class=\"token class-name\">DateTimeFormatter</span> formatter3 <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd hh:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//格式化</span>\n\t<span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> formatter3<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2019-02-18 03:52:09</span>\n\n\t<span class=\"token comment\">//解析</span>\n\t<span class=\"token class-name\">TemporalAccessor</span> accessor <span class=\"token operator\">=</span> formatter3<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2019-02-18 03:52:09\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>accessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"与传统日期处理的转换\"><a class=\"markdownIt-Anchor\" href=\"#与传统日期处理的转换\">#</a> 与传统日期处理的转换</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20210131181535880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<h2 id=\"java比较器\"><a class=\"markdownIt-Anchor\" href=\"#java比较器\">#</a> Java 比较器</h2>\n<p>自然排序：java.lang.Comparable</p>\n<p>1.Comparable 接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序。<br>\n2. 实现 Comparable 的类必须实现 compareTo (Object obj) 方法，两个对象即通过 compareTo (Object obj) 方法的返回值来比较大小。如果当前对象 this 大于形参对象 obj，则返回正整数，如果当前对象 this 小于形参对象 obj，则返回负整数，如果当前对象 this 等于形参对象 obj，则返回零。<br>\n3. 实现 Comparable 接口的对象列表（和数组）可以通过 Collections.sort 或 Arrays.sort 进行自动排序。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。<br>\n4. 对于类 C 的每一个 e1 和 e2 来说，当且仅当 e1.compareTo (e2) == 0 与 e1.equals (e2) 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals 一致。建议（虽然不是必需的）最好使自然排序与 equals 一致。</p>\n<p>Comparable 的典型实现：(默认都是从小到大排列的)<br>\n 1.String：按照字符串中字符的 Unicode 值进行比较<br>\n 2.Character：按照字符的 Unicode 值来进行比较<br>\n 3. 数值类型对应的包装类以及 BigInteger、BigDecimal：按照它们对应的数值大小进行比较<br>\n 4.Boolean：true 对应的包装类实例大于 false 对应的包装类实例<br>\n 5.Date、Time 等：后面的日期时间比前面的日期时间大</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CompareTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/*\n    Comparable接口的使用举例：  自然排序\n    1.像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的方式。\n    2.像String、包装类重写compareTo()方法以后，进行了从小到大的排列\n    3. 重写compareTo(obj)的规则：\n        如果当前对象this大于形参对象obj，则返回正整数，\n        如果当前对象this小于形参对象obj，则返回负整数，\n        如果当前对象this等于形参对象obj，则返回零。\n    4. 对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。\n       在compareTo(obj)方法中指明如何排序\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"CC\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"KK\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"MM\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"GG\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"JJ\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"DD\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lenovoMouse\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dellMouse\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">43</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaomiMouse\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"huaweiMouse\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"microsoftMouse\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">43</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*\n    Comparator接口的使用：定制排序\n    1.背景：\n    当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，\n    或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，\n    那么可以考虑使用 Comparator 的对象来排序\n    2.重写compare(Object o1,Object o2)方法，比较o1和o2的大小：\n    如果方法返回正整数，则表示o1大于o2；\n    如果返回0，表示相等；\n    返回负整数，表示o1小于o2。\n\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"CC\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"KK\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"MM\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"GG\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"JJ\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"DD\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n            <span class=\"token comment\">//按照字符串从大到小的顺序排列</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">&amp;&amp;</span> o2 <span class=\"token keyword\">instanceof</span>  <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> o1<span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> o2<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//                return 0;</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的数据类型不一致\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lenovoMouse\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dellMouse\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">43</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaomiMouse\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"huaweiMouse\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"huaweiMouse\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"microsoftMouse\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">43</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//指明商品比较大小的方式:按照产品名称从低到高排序,再按照价格从高到低排序</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Goods</span> <span class=\"token operator\">&amp;&amp;</span> o2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Goods</span> g1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Goods</span><span class=\"token punctuation\">)</span>o1<span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Goods</span> g2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Goods</span><span class=\"token punctuation\">)</span>o2<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>g2<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>g1<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>g2<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> g1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>g2<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的数据类型不一致\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//指明商品比较大小的方式:按照价格从低到高排序,再按照产品名称从高到低排序</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//        System.out.println(\"**************\");</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Goods</span> goods <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Goods</span><span class=\"token punctuation\">)</span>o<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//方式一：</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">&gt;</span> goods<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">&lt;</span> goods<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//                return 0;</span>\n\t\t   <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>goods<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//方式二：</span>\n<span class=\"token comment\">//           return Double.compare(this.price,goods.price);</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//        return 0;</span>\n\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传入的数据类型不一致！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"system类\"><a class=\"markdownIt-Anchor\" href=\"#system类\">#</a> System 类</h2>\n<p>由于该类的构造器是 private 的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是 static 的，所以也可以很方便的进行调用。</p>\n<p>成员变量 : System 类内部包含 in、out 和 err 三个成员变量，分别代表标准输入流 (键盘输入)，标准输出流 (显示器) 和标准错误输出流 (显示器)。</p>\n<p>成员方法:</p>\n<p>① native long currentTimeMillis()</p>\n<p>②void exit (int status)：该方法的作用是退出程序。其中 status 的值为 0 代表正常退出，非零代表异常退出。 使用该方法可以在图形界面编程中实现程序的退出功能等。</p>\n<p>③void gc () : 该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则取决于系统中垃圾回收算法的实现以及系统执行时的情况。</p>\n<p>④ String getProperty (String key) : 该方法的作用是获得系统中属性名为 key 的属性对应的值。系统中常见的属性名以及属性的作用如下表所示</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210131183742608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<h2 id=\"math类\"><a class=\"markdownIt-Anchor\" href=\"#math类\">#</a> Math 类</h2>\n<p>java.lang.Math 提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为 double 型。<br>\nabs 绝对值<br>\n acos,asin,atan,cos,sin,tan 三角函数<br>\n sqrt 平方根<br>\n pow (double a,doble b) a 的 b 次幂<br>\n log 自然对数<br>\n exp e 为底指数<br>\n max (double a,double b)<br>\nmin(double a,double b)<br>\n random () 返回 0.0 到 1.0 的随机数<br>\n long round (double a) double 型数据 a 转换为 long 型（四舍五入）<br>\ntoDegrees (double angrad) 弧度 —&gt; 角度<br>\n toRadians (double angdeg) 角度 —&gt; 弧度</p>\n<h2 id=\"biginteger与bigdecimal\"><a class=\"markdownIt-Anchor\" href=\"#biginteger与bigdecimal\">#</a> BigInteger 与 BigDecimal</h2>\n<h3 id=\"biginteger\"><a class=\"markdownIt-Anchor\" href=\"#biginteger\">#</a> BigInteger</h3>\n<p>java.math 包的 BigInteger 可以表示不可变的任意精度的整数。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。</p>\n<p>构造器：BigInteger (String val)：根据字符串构建 BigInteger 对象</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210131184318608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<h3 id=\"bigdecimal\"><a class=\"markdownIt-Anchor\" href=\"#bigdecimal\">#</a> BigDecimal</h3>\n<p>BigDecimal 类支持不可变的、任意精度的有符号十进制定点数。</p>\n<p>构造器 ①public BigDecimal (double val) ②public BigDecimal (String val)</p>\n<p>常用方法</p>\n<p>public BigDecimal add(BigDecimal augend)<br>\npublic BigDecimal subtract(BigDecimal subtrahend)<br>\npublic BigDecimal multiply(BigDecimal multiplicand)<br>\npublic BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2021/01/27/idea/",
            "url": "http://fsh010816.github.io/2021/01/27/idea/",
            "title": "IDEA",
            "date_published": "2021-01-27T13:11:28.000Z",
            "content_html": "<h1 id=\"idea\"><a class=\"markdownIt-Anchor\" href=\"#idea\">#</a> IDEA</h1>\n<h2 id=\"project-module\"><a class=\"markdownIt-Anchor\" href=\"#project-module\">#</a> Project Module</h2>\n<p>在 project 下新建 Module</p>\n<h3 id=\"删除模块\"><a class=\"markdownIt-Anchor\" href=\"#删除模块\">#</a> 删除模块</h3>\n<img src=\"https://img-blog.csdnimg.cn/20210127212417894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom:50%;\">\n<img src=\"https://img-blog.csdnimg.cn/20210127212417903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom:50%;\">\n<img src=\"https://img-blog.csdnimg.cn/20210127212417871.png\" style=\"zoom:50%;\">\n<p>再右键项目名删除</p>\n<h2 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h2>\n<h3 id=\"主题\"><a class=\"markdownIt-Anchor\" href=\"#主题\">#</a> 主题</h3>\n<h3 id=\"鼠标滚轮控制字体大小\"><a class=\"markdownIt-Anchor\" href=\"#鼠标滚轮控制字体大小\">#</a> 鼠标滚轮控制字体大小</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20210127221328448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"鼠标悬浮提示\"><a class=\"markdownIt-Anchor\" href=\"#鼠标悬浮提示\">#</a> 鼠标悬浮提示</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20210127221328444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"自动导包\"><a class=\"markdownIt-Anchor\" href=\"#自动导包\">#</a> 自动导包</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20210127221802761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<h3 id=\"行号-方法间的分隔符\"><a class=\"markdownIt-Anchor\" href=\"#行号-方法间的分隔符\">#</a> 行号 方法间的分隔符</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20210127221328486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"忽略大小写提示\"><a class=\"markdownIt-Anchor\" href=\"#忽略大小写提示\">#</a> 忽略大小写提示</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20210127221328466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"取消单行显示tabs\"><a class=\"markdownIt-Anchor\" href=\"#取消单行显示tabs\">#</a> 取消单行显示 tabs</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20210127221328497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"字体\"><a class=\"markdownIt-Anchor\" href=\"#字体\">#</a> 字体</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20210127221328516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"类头的文档注释信息\"><a class=\"markdownIt-Anchor\" href=\"#类头的文档注释信息\">#</a> 类头的文档注释信息</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20210127221328494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"编码\"><a class=\"markdownIt-Anchor\" href=\"#编码\">#</a> 编码</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20210127221247412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<h3 id=\"自动编译\"><a class=\"markdownIt-Anchor\" href=\"#自动编译\">#</a> 自动编译</h3>\n<img src=\"https://img-blog.csdnimg.cn/20210127221204747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\">\n<h2 id=\"模板\"><a class=\"markdownIt-Anchor\" href=\"#模板\">#</a> 模板</h2>\n<p>自定义模板</p>\n<img src=\"https://img-blog.csdnimg.cn/20210127221027655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\">\n<p>先加一个 group, 在新加的 group 下添加模板</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2021/01/27/8-duo-xian-cheng/",
            "url": "http://fsh010816.github.io/2021/01/27/8-duo-xian-cheng/",
            "title": "8-多线程",
            "date_published": "2021-01-27T10:19:45.000Z",
            "content_html": "<h1 id=\"多线程\"><a class=\"markdownIt-Anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<h2 id=\"基本概念\"><a class=\"markdownIt-Anchor\" href=\"#基本概念\">#</a> 基本概念</h2>\n<p>程序：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象</p>\n<p>进程：是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。<br>\n如：运行中的 QQ，运行中的 MP3 播放器<br>\n进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</p>\n<p>线程：进程可进一步细化为线程，是一个程序内部的一条执行路径。<br>\n若一个进程同一时间 并行执行多个线程，就是支持多线程的<br>\n线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器 (pc)，线程切换的开销小<br>\n一个进程中的多个线程共享相同的内存单元 / 内存地址空间它们从同一堆中分配对象，可以访问相同的变量和\t对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患</p>\n<p>一个 Java 应用程序 java.exe，其实至少有三个线程：main () 主线程，gc () 垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</p>\n<p>并行：多个 CPU 同时执行多个任务。比如：多个人同时做不同的事。<br>\n并发：一个 CPU (采用时间片) 同时执行多个任务。比如：秒杀、多个人做同一件事。</p>\n<h2 id=\"线程的创建\"><a class=\"markdownIt-Anchor\" href=\"#线程的创建\">#</a> 线程的创建</h2>\n<p>每个线程都是通过某个特定 Thread 对象的 run () 方法来完成操作的，经常把 run () 方法的主体称为线程体。</p>\n<p>run () 方法由 JVM 调用，什么时候调用，执行的过程控制都由操作系统的 CPU 调度决定。</p>\n<h3 id=\"多线程的创建方式一\"><a class=\"markdownIt-Anchor\" href=\"#多线程的创建方式一\">#</a> 多线程的创建方式一</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 多线程的创建，方式一：继承于Thread类\n * 1. 创建一个继承于Thread类的子类\n * 2. 重写Thread类的run() --&gt; 将此线程执行的操作声明在run()中\n * 3. 创建Thread类的子类的对象\n * 4. 通过此对象调用start()\n * 例子：遍历100以内的所有的偶数\n *\n * @author shkstart\n * @create 2019-02-13 上午 11:46\n */</span>\n\n<span class=\"token comment\">//1. 创建一个继承于Thread类的子类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//2. 重写Thread类的run()</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//3. 创建Thread类的子类的对象</span>\n        <span class=\"token class-name\">MyThread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//4.通过此对象调用start():①启动当前线程 ② 调用当前线程的run()</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//问题一：我们不能通过直接调用run()的方式启动线程。</span>\n<span class=\"token comment\">//        t1.run();</span>\n\n        <span class=\"token comment\">//问题二：再启动一个线程，遍历100以内的偶数。不可以还让已经start()的线程去执行。会报IllegalThreadStateException</span>\n<span class=\"token comment\">//        t1.start();</span>\n        <span class=\"token comment\">//我们需要重新创建一个线程的对象</span>\n        <span class=\"token class-name\">MyThread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"创建多线程的方式二\"><a class=\"markdownIt-Anchor\" href=\"#创建多线程的方式二\">#</a> 创建多线程的方式二</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 创建多线程的方式二：实现Runnable接口\n * 1. 创建一个实现了Runnable接口的类\n * 2. 实现类去实现Runnable中的抽象方法：run()\n * 3. 创建实现类的对象\n * 4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象\n * 5. 通过Thread类的对象调用start()\n *\n *\n * 比较创建线程的两种方式。\n * 开发中：优先选择：实现Runnable接口的方式\n * 原因：1. 实现的方式没有类的单继承性的局限性\n *      2. 实现的方式更适合来处理多个线程有共享数据的情况。\n *\n * 联系：public class Thread implements Runnable\n * 相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。\n *\n * @author shkstart\n * @create 2019-02-13 下午 4:34\n */</span>\n<span class=\"token comment\">//1. 创建一个实现了Runnable接口的类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//2. 实现类去实现Runnable中的抽象方法：run()</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadTest1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//3. 创建实现类的对象</span>\n        <span class=\"token class-name\">MThread</span> mThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span>\n        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>mThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//5. 通过Thread类的对象调用start():① 启动线程 ②调用当前线程的run()--&gt;调用了Runnable类型的target的run()</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//再启动一个线程，遍历100以内的偶数</span>\n        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>mThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"thread中的常用方法\"><a class=\"markdownIt-Anchor\" href=\"#thread中的常用方法\">#</a> Thread 中的常用方法</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\t\n * 测试Thread中的常用方法：\n * 1. start():启动当前线程；调用当前线程的run()\n * 2. run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中\n * 3. currentThread():静态方法，返回执行当前代码的线程\n * 4. getName():获取当前线程的名字\n * 5. setName():设置当前线程的名字\n * 6. yield():释放当前cpu的执行权\n * 7. join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才\n *           结束阻塞状态。\n * 8. stop():已过时。当执行此方法时，强制结束当前线程。\n * 9. sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前\n *                          线程是阻塞状态。\n * 10. isAlive():判断当前线程是否存活\n *\n *\n * 线程的优先级：\n * 1.\n * MAX_PRIORITY：10\n * MIN _PRIORITY：1\n * NORM_PRIORITY：5  --&gt;默认优先级\n * 2.如何获取和设置当前线程的优先级：\n *   getPriority():获取线程的优先级\n *   setPriority(int p):设置线程的优先级\n *\n *   说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下\n *   被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。线程创建时继承父线程的优先级\n *\n *\n * @author shkstart\n * @create 2019-02-13 下午 2:26\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"创建thread类的匿名子类的方式\"><a class=\"markdownIt-Anchor\" href=\"#创建thread类的匿名子类的方式\">#</a> 创建 Thread 类的匿名子类的方式</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//创建Thread类的匿名子类的方式</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"线程的分类\"><a class=\"markdownIt-Anchor\" href=\"#线程的分类\">#</a> 线程的分类</h3>\n<p>一种是守护线程，一种是用户线程</p>\n<p>1. 守护线程是用来服务用户线程的，通过在 start () 方法前调用 thread.setDaemon (true) 可以把一个用户线程变成一个守护线程。</p>\n<p>2.Java 垃圾回收就是一个典型的守护线程。<br>\n3. 若 JVM 中都是守护线程，当前 JVM 将退出</p>\n<h2 id=\"线程的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#线程的生命周期\">#</a> 线程的生命周期</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20210129200209833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<h2 id=\"同步\"><a class=\"markdownIt-Anchor\" href=\"#同步\">#</a> 同步</h2>\n<h3 id=\"同步代码块-同步方法\"><a class=\"markdownIt-Anchor\" href=\"#同步代码块-同步方法\">#</a> 同步代码块 同步方法</h3>\n<p>1 、 如何找问题，即代码是否存在线程安全 ？</p>\n<p>（1）明确哪些代码是多线程运行的代码<br>\n（2）明确多个线程是否有共享数据<br>\n（3）明确多线程运行代码中是否有多条语句操作共享数据</p>\n<p>2 、 如何解决呢？<br>\n 对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。即所有操作共享数据的这些语句都要放在同步范围中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 例子：创建三个窗口卖票，总票数为100张.使用实现Runnable接口的方式\n *\n * 1.问题：卖票过程中，出现了重票、错票 --&gt;出现了线程的安全问题\n * 2.问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。\n * 3.如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他\n *            线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。\n *\n *\n * 4.在Java中，我们通过同步机制，来解决线程的安全问题。\n *\n *  方式一：同步代码块\n *\n *   synchronized(同步监视器){\n *      //需要被同步的代码\n *\n *   }\n *  说明：1.操作共享数据的代码，即为需要被同步的代码。  --&gt;不能包含代码多了，也不能包含代码少了。\n *       2.共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。\n *       3.同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。\n *          要求：多个线程必须要共用同一把锁。\n *\n *       补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。\n *  方式二：同步方法。\n *     如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。\n *\n *\n *  5.同步的方式，解决了线程的安全问题。---好处\n *    操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。 ---局限性\n *\n * @author shkstart\n * @create 2019-02-13 下午 4:47\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Window1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> ticket <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//    Object obj = new Object();</span>\n<span class=\"token comment\">//    Dog dog = new Dog();</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//        Object obj = new Object();</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//此时的this:唯一的Window1的对象   //方式二：synchronized (dog) {</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ticket <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":卖票，票号为：\"</span> <span class=\"token operator\">+</span> ticket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n                    ticket<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WindowTest1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Window1</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Window1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"窗口1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"窗口2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t3<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"窗口3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"使用同步代码块同步方法解决继承thread类的方式的线程安全问题\"><a class=\"markdownIt-Anchor\" href=\"#使用同步代码块同步方法解决继承thread类的方式的线程安全问题\">#</a> 使用同步代码块，同步方法解决继承 Thread 类的方式的线程安全问题</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 使用同步代码块解决继承Thread类的方式的线程安全问题\n * 说明：在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。\n * 使用同步方法解决实现Runnable接口的线程安全问题\n *  关于同步方法的总结：\n *  1. 同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。\n *  2. 非静态的同步方法，同步监视器是：this\n *     静态的同步方法，同步监视器是：当前类本身\n *\n * @author shkstart\n * @create 2019-02-15 上午 11:35\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"线程安全的单例模式中的懒汉式\"><a class=\"markdownIt-Anchor\" href=\"#线程安全的单例模式中的懒汉式\">#</a> 线程安全的单例模式中的懒汉式</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BankTest</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Bank</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Bank</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//方式一：效率稍差</span>\n<span class=\"token comment\">//        synchronized (Bank.class) {</span>\n<span class=\"token comment\">//            if(instance == null){</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//                instance = new Bank();</span>\n<span class=\"token comment\">//            }</span>\n<span class=\"token comment\">//            return instance;</span>\n<span class=\"token comment\">//        }</span>\n        <span class=\"token comment\">//方式二：效率更高</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Bank</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n                    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"解决线程安全问题的方式三lock锁\"><a class=\"markdownIt-Anchor\" href=\"#解决线程安全问题的方式三lock锁\">#</a> 解决线程安全问题的方式三：Lock 锁</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 解决线程安全问题的方式三：Lock锁  --- JDK5.0新增\n *\n * 1. 面试题：synchronized 与 Lock的异同？\n *   相同：二者都可以解决线程安全问题\n *   不同：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器\n *        Lock需要手动的启动同步（lock()），同时结束同步也需要手动的实现（unlock()）\n *        Lock只有代码块锁，synchronized有代码块锁和方法锁\n *\n * 2.优先使用顺序：\n * Lock  同步代码块（已经进入了方法体，分配了相应资源）  同步方法（在方法体之外）\n *\n *\n *  面试题：如何解决线程安全问题？有几种方式\n * @author shkstart\n * @create 2019-02-15 下午 3:38\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Window</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> ticket <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//1.实例化ReentrantLock</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\n                <span class=\"token comment\">//2.调用锁定方法lock()</span>\n                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ticket <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"：售票，票号为：\"</span> <span class=\"token operator\">+</span> ticket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    ticket<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//3.调用解锁方法：unlock()</span>\n                lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"不会释放锁的操作释放锁\"><a class=\"markdownIt-Anchor\" href=\"#不会释放锁的操作释放锁\">#</a> 不会释放锁的操作，释放锁</h3>\n<p>不释放锁：</p>\n<p>线程执行同步代码块或同步方法时，程序调用 Thread.sleep (Long l)、Thread.yield () 方法暂停当前线程的执行<br>\n线程执行同步代码块时，其它线程调用该线程 suspend () 方法将该线程挂起，该线程不会释放锁（同步监视器）<br>\n尽量避免使用 suspend () 和 resume () 来控制线程</p>\n<p>释放锁：</p>\n<p>当前线程的同步方法、同步代码块执行结束<br>\n当前线程的同步方法、同步代码块遇到 break、return 终止该代码块、该方法的继续执行<br>\n当前线程的同步方法、同步代码块中出现了未处理 Error 和 Exception，导致异常结束<br>\n当前线程在同步方法、同步代码块中执行了线程对象的 wait () 方法，当前线程暂停，并释放锁</p>\n<h2 id=\"线程的通信\"><a class=\"markdownIt-Anchor\" href=\"#线程的通信\">#</a> 线程的通信</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 线程通信的例子：使用两个线程打印 1-100。线程1, 线程2 交替打印\n *\n * 涉及到的三个方法：\n * wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。  对象名.wait()\n * notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。  对象名.notify()\n * notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。\n *\n * 说明：\n * 1.wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。\n * 2.wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。\n *    否则，会出现IllegalMonitorStateException异常\n * 3.wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。\n *\n * 面试题：sleep() 和 wait()的异同？\n * 1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。\n * 2.不同点：1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()\n *          2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中\n *          3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。\n *\n * @author shkstart\n * @create 2019-02-15 下午 4:21\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"jdk50新增线程创建方式\"><a class=\"markdownIt-Anchor\" href=\"#jdk50新增线程创建方式\">#</a> JDK5.0 新增线程创建方式</h2>\n<h3 id=\"新增方式三实现callable-接口\"><a class=\"markdownIt-Anchor\" href=\"#新增方式三实现callable-接口\">#</a> 新增方式三：实现 Callable 接口</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 创建线程的方式三：实现Callable接口。 --- JDK 5.0新增\n *\n *\n * 如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？\n * 1. call()可以有返回值的。\n * 2. call()可以抛出异常，被外面的操作捕获，获取异常的信息\n * 3. Callable是支持泛型的\n * 4. 需要借助FutureTask类，比如获取返回结果\n *\n * @author shkstart\n * @create 2019-02-15 下午 6:01\n */</span>\n<span class=\"token comment\">//1.创建一个实现Callable的实现类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NumThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//2.实现call方法，将此线程需要执行的操作声明在call()中</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadNew</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//3.创建Callable接口实现类的对象</span>\n        <span class=\"token class-name\">NumThread</span> numThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NumThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span>\n        <span class=\"token class-name\">FutureTask</span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span>numThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//6.获取Callable中call方法的返回值</span>\n            <span class=\"token comment\">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span>\n            <span class=\"token class-name\">Object</span> sum <span class=\"token operator\">=</span> futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总和为：\"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExecutionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"创建线程的方式四使用线程池\"><a class=\"markdownIt-Anchor\" href=\"#创建线程的方式四使用线程池\">#</a> 创建线程的方式四：使用线程池</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 创建线程的方式四：使用线程池\n *\n * 好处：\n * 1.提高响应速度（减少了创建新线程的时间）\n * 2.降低资源消耗（重复利用线程池中线程，不需要每次都创建）\n * 3.便于线程管理\n *      corePoolSize：核心池的大小\n *      maximumPoolSize：最大线程数\n *      keepAliveTime：线程没有任务时最多保持多长时间后会终止\n *\n *\n * 面试题：创建多线程有几种方式？四种！\n * @author shkstart\n * @create 2019-02-15 下午 6:30\n */</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NumberThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NumberThread1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPool</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//1. 提供指定线程数量的线程池 ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor</span>\n\t\t<span class=\"token comment\">// Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</span>\n        <span class=\"token class-name\">ExecutorService</span> service <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ThreadPoolExecutor</span> service1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">)</span> service<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//设置线程池的属性</span>\n<span class=\"token comment\">//        System.out.println(service.getClass());</span>\n<span class=\"token comment\">//        service1.setCorePoolSize(15);</span>\n<span class=\"token comment\">//        service1.setKeepAliveTime();</span>\n\n\n        <span class=\"token comment\">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span>\n        service<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NumberThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//适合适用于Runnable</span>\n        service<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NumberThread1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//适合适用于Runnable</span>\n\n<span class=\"token comment\">//        service.submit(Callable callable);//适合使用于Callable</span>\n        <span class=\"token comment\">//3.关闭连接池</span>\n        service<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2021/01/23/7-yi-chang-chu-li/",
            "url": "http://fsh010816.github.io/2021/01/23/7-yi-chang-chu-li/",
            "title": "7-异常处理",
            "date_published": "2021-01-23T08:40:04.000Z",
            "content_html": "<h1 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\">#</a> 异常处理</h1>\n<h2 id=\"异常体系结构\"><a class=\"markdownIt-Anchor\" href=\"#异常体系结构\">#</a> 异常体系结构</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n * 一、异常体系结构\n * \n * java.lang.Throwable\n * \t\t|-----java.lang.Error:一般不编写针对性的代码进行处理。\n * \t\t|-----java.lang.Exception:可以进行异常的处理\n * \t\t\t|------编译时异常(checked)\n * \t\t\t\t\t|-----IOException\n * \t\t\t\t\t\t|-----FileNotFoundException\n * \t\t\t\t\t|-----ClassNotFoundException\n * \t\t\t|------运行时异常(unchecked,RuntimeException)\n * \t\t\t\t\t|-----NullPointerException\n * \t\t\t\t\t|-----ArrayIndexOutOfBoundsException\n * \t\t\t\t\t|-----ClassCastException\n * \t\t\t\t\t|-----NumberFormatException\n * \t\t\t\t\t|-----InputMismatchException\n * \t\t\t\t\t|-----ArithmeticException\n * \n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"异常的处理抓抛模型\"><a class=\"markdownIt-Anchor\" href=\"#异常的处理抓抛模型\">#</a> 异常的处理：抓抛模型</h2>\n<p>一、异常的处理：抓抛模型</p>\n<p>过程一：“抛”：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。并将此对象抛出。一旦抛出对象以后，其后的代码就不再执行。</p>\n<p>关于异常对象的产生：① 系统自动生成的异常对象② 手动的生成一个异常对象，并抛出（throw）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入的数据非法！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>过程二：“抓”：可以理解为异常的处理方式：① try-catch-finally  ② throws</p>\n<p>二、try-catch-finally 的使用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">//可能出现异常的代码</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">1</span> 变量名<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">//处理异常的方式1</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">2</span> 变量名<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">//处理异常的方式2</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">3</span> 变量名<span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">//处理异常的方式3</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">//一定会执行的代码</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>说明：</p>\n<p>1.finally 是可选的。</p>\n<p>2. 使用 try 将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去 catch 中进行匹配</p>\n<p>3. 一旦 try 中的异常对象匹配到某一个 catch 时，就进入 catch 中进行异常的处理。一旦处理完成，就跳出当前的 try-catch 结构（在没有写 finally 的情况）。继续执行其后的代码</p>\n<p>4.catch 中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。catch 中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错</p>\n<p>5. 常用的异常对象处理的方式： ① String  getMessage ()    ② printStackTrace ()</p>\n<p>6. 在 try 结构中声明的变量，再出了 try 结构以后，就不能再被调用</p>\n<p>7.try-catch-finally 结构可以嵌套</p>\n<p>体会 1：使用 try-catch-finally 处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。</p>\n<p>相当于我们使用 try-catch-finally 将一个编译时可能出现的异常，延迟到运行时出现。</p>\n<p>体会 2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写 try-catch-finally 了。</p>\n<p>针对于编译时异常，我们说一定要考虑异常的处理。</p>\n<h2 id=\"异常处理的方式二throws-异常类型\"><a class=\"markdownIt-Anchor\" href=\"#异常处理的方式二throws-异常类型\">#</a> 异常处理的方式二：throws + 异常类型</h2>\n<p>1.\"throws + 异常类型\" 写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。</p>\n<p>一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足 throws 后异常</p>\n<p>类型时，就会被抛出。异常代码后续的代码，就不再执行！</p>\n<p>2. 体会：try-catch-finally: 真正的将异常给处理掉了。</p>\n<p>throws 的方式只是将异常抛给了方法的调用者。  并没有真正将异常处理掉。</p>\n<p>3. 开发中如何选择使用 try-catch-finally 还是使用 throws？</p>\n<p>3.1 如果父类中被重写的方法没有 throws 方式处理异常，则子类重写的方法也不能使用 throws，意味着如果</p>\n<p>子类重写的方法中有异常，必须使用 try-catch-finally 方式处理。</p>\n<p>3.2 执行的方法 a 中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用 throws 的方式进行处理。而执行的方法 a 可以考虑使用 try-catch-finally 方式进行处理。</p>\n<h2 id=\"try-catch-finally中finally的使用\"><a class=\"markdownIt-Anchor\" href=\"#try-catch-finally中finally的使用\">#</a> try-catch-finally 中 finally 的使用：</h2>\n<p>1.finally 是可选的</p>\n<p>2.finally 中声明的是一定会被执行的代码。即使 catch 中又出现异常了，try 中有 return 语句，catch 中有 return 语句等情况。</p>\n<p>3. 像数据库连接、输入输出流、网络编程 Socket 等资源，JVM 是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在 finally 中。</p>\n<h2 id=\"方法重写的规则之一\"><a class=\"markdownIt-Anchor\" href=\"#方法重写的规则之一\">#</a> 方法重写的规则之一：</h2>\n<p>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p>\n<h2 id=\"如何自定义异常类\"><a class=\"markdownIt-Anchor\" href=\"#如何自定义异常类\">#</a> 如何自定义异常类？</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n * 如何自定义异常类？\n * 1. 继承于现有的异常结构：RuntimeException 、Exception\n * 2. 提供全局常量：serialVersionUID\n * 3. 提供重载的构造器\n * \n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">7034897193246939L</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2021/01/21/6-mian-xiang-dui-xiang-xia/",
            "url": "http://fsh010816.github.io/2021/01/21/6-mian-xiang-dui-xiang-xia/",
            "title": "6-面向对象(下)",
            "date_published": "2021-01-21T08:15:45.000Z",
            "content_html": "<h1 id=\"面向对象下\"><a class=\"markdownIt-Anchor\" href=\"#面向对象下\">#</a> 面向对象 (下)</h1>\n<h2 id=\"static\"><a class=\"markdownIt-Anchor\" href=\"#static\">#</a> static</h2>\n<p>static 关键字的使用</p>\n<p>1.static: 静态的</p>\n<p>2.static 可以用来修饰：属性、方法、代码块、内部类</p>\n<p>3. 使用 static 修饰属性：静态变量（或类变量）</p>\n<p>3.1 属性，按是否使用 static 修饰，又分为：静态属性  vs 非静态属性 (实例变量)</p>\n<p>实例变量：我们创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。</p>\n<p>静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。</p>\n<p>3.2 static 修饰属性的其他说明：</p>\n<p>① 静态变量随着类的加载而加载。可以通过 \"类。静态变量\" 的方式进行调用</p>\n<p>② 静态变量的加载要早于对象的创建。</p>\n<p>③ 由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。</p>\n<p>④\t\t类变量\t实例变量</p>\n<p>类\t\tyes\t\tno</p>\n<p>对象\t\tyes\t\tyes</p>\n<p>类不能直接调用实例变量</p>\n<p>3.3 静态属性举例：System.out; Math.PI;</p>\n<p>4. 使用 static 修饰方法：静态方法</p>\n<p>① 随着类的加载而加载，可以通过 \"类。静态方法\" 的方式进行调用</p>\n<p>②\t\t\t静态方法\t非静态方法</p>\n<p>类\t\tyes\t\tno</p>\n<p>对象\t\tyes\t\tyes</p>\n<p>③ 静态方法中，只能调用静态的方法或属性</p>\n<p>非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性</p>\n<p>5.static 注意点：</p>\n<p>5.1 在静态的方法内，不能使用 this 关键字、super 关键字</p>\n<p>5.2 关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。</p>\n<p>5.3 static 修饰的方法不能被重写</p>\n<p>6. 开发中，如何确定一个属性是否要声明为 static 的？</p>\n<p>​\t属性是可以被多个对象所共享的，不会随着对象的不同而不同的。</p>\n<p>​\t类中的常量也常常声明为 static</p>\n<p>开发中，如何确定一个方法是否要声明为 static 的？</p>\n<p>​\t操作静态属性的方法，通常设置为 static 的</p>\n<p>​\t工具类中的方法，习惯上声明为 static 的。 比如：Math、Arrays、Collections</p>\n<p>内存解析</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210122144647185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"未考虑static\"></p>\n<h2 id=\"单例-singleton设计模式\"><a class=\"markdownIt-Anchor\" href=\"#单例-singleton设计模式\">#</a> 单例 (Singleton) 设计模式</h2>\n<p>单例设计模式：</p>\n<p>1. 所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。</p>\n<p>2. 如何实现？</p>\n<p>饿汉式  vs 懒汉式</p>\n<p>3. 区分饿汉式 和 懒汉式</p>\n<p>饿汉式：</p>\n<p>坏处：对象加载时间过长。</p>\n<p>好处：饿汉式是线程安全的</p>\n<p>懒汉式：好处：延迟对象的创建。</p>\n<p>目前的写法坏处：线程不安全。—&gt; 到多线程内容时，再修改</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//饿汉式</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//1.私有化类的构造器</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">//2.内部创建类的对象</span>\n\t<span class=\"token comment\">//4.要求此对象也必须声明为静态的</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Bank</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">//3.提供公共的静态的方法，返回类的对象</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Bank</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//懒汉式 未考虑线程安全</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token comment\">//1.私有化类的构造器</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">//2.声明当前类对象，没有初始化</span>\n\t<span class=\"token comment\">//4.此对象也必须声明为static的</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Order</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">//3.声明public、static的返回当前类对象的方法</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Order</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\n\t\t\tinstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"理解main方法的语法\"><a class=\"markdownIt-Anchor\" href=\"#理解main方法的语法\">#</a> 理解 main 方法的语法</h2>\n<p>main () 方法的使用说明：</p>\n<ul>\n<li>\n<ol>\n<li>main () 方法作为程序的入口</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>main () 方法也是一个普通的静态方法</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>main () 方法可以作为我们与控制台交互的方式。（之前：使用 Scanner）</li>\n</ol>\n</li>\n</ul>\n<p>由于 Java 虚拟机需要调用类的 main () 方法，所以该方法的访问权限必须是 public，又因为 Java 虚拟机在执行 main () 方法时不必创建对象，所以该方法必须是 static 的，该方法接收一个 String 类型的数组参数，该数组中保存执 Java 命令时传递给所运行的类的参数。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210122150639663.png#pic_center\" alt=\"\"></p>\n<h2 id=\"代码块\"><a class=\"markdownIt-Anchor\" href=\"#代码块\">#</a> 代码块</h2>\n<p>代码块（或初始化块）</p>\n<p>1. 代码块的作用：用来初始化类、对象</p>\n<p>2. 代码块如果有修饰的话，只能使用 static.</p>\n<p>3. 分类：静态代码块  vs 非静态代码块</p>\n<p>4. 静态代码块</p>\n<p>内部可以有输出语句</p>\n<p>随着类的加载而执行，而且只执行一次</p>\n<p>作用：初始化类的信息</p>\n<p>如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</p>\n<p>静态代码块的执行要优先于非静态代码块的执行</p>\n<p>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</p>\n<p>5. 非静态代码块</p>\n<p>内部可以有输出语句</p>\n<p>随着对象的创建而执行</p>\n<p>每创建一个对象，就执行一次非静态代码块</p>\n<p>作用：可以在创建对象时，对对象的属性等进行初始化</p>\n<p>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</p>\n<p>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</p>\n<h2 id=\"对属性可以赋值的位置\"><a class=\"markdownIt-Anchor\" href=\"#对属性可以赋值的位置\">#</a> 对属性可以赋值的位置：</h2>\n<ul>\n<li>①默认初始化</li>\n<li>②显式初始化 /⑤在代码块中赋值</li>\n<li>③构造器中初始化</li>\n<li>④有了对象以后，可以通过 \"对象。属性\" 或 \"对象。方法\" 的方式，进行赋值</li>\n<li></li>\n<li>执行的先后顺序：① - ② / ⑤ - ③ - ④</li>\n</ul>\n<h2 id=\"final\"><a class=\"markdownIt-Anchor\" href=\"#final\">#</a> final</h2>\n<p>1.final 可以用来修饰的结构：类、方法、变量</p>\n<p>2.final 用来修饰一个类：此类不能被其他类所继承。</p>\n<p>比如：String 类、System 类、StringBuffer 类</p>\n<p>3.final 用来修饰方法：表明此方法不可以被重写</p>\n<p>比如：Object 类中 getClass ();</p>\n<p>4.final 用来修饰变量：此时的 \"变量\" 就称为是一个常量</p>\n<p>4.1 final 修饰属性：可以考虑赋值的位置有：显式初始化、代码块中初始化、构造器中初始化</p>\n<p>4.2 final 修饰局部变量：</p>\n<p>尤其是使用 final 修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</p>\n<p>static final 用来修饰属性：全局常量</p>\n<h2 id=\"abstract关键字的使用\"><a class=\"markdownIt-Anchor\" href=\"#abstract关键字的使用\">#</a> abstract 关键字的使用</h2>\n<p>1.abstract: 抽象的</p>\n<p>2.abstract 可以用来修饰的结构：类、方法</p>\n<p>3.abstract 修饰类：抽象类</p>\n<p>此类不能实例化</p>\n<p>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）</p>\n<p>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作</p>\n<p>4.abstract 修饰方法：抽象方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>抽象方法只有方法的声明，没有方法体</p>\n<p>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。</p>\n<p>若子类重写了父类中的所有的抽象方法后，此子类方可实例化</p>\n<p>若子类没有重写父类中的所有的抽象方法，则此子类也是一个抽象类，需要使用 abstract 修饰</p>\n<p>abstract 使用上的注意点：</p>\n<p>1.abstract 不能用来修饰：属性、构造器等结构</p>\n<p>2.abstract 不能用来修饰私有方法、静态方法、final 的方法、final 的类</p>\n<h2 id=\"匿名子类\"><a class=\"markdownIt-Anchor\" href=\"#匿名子类\">#</a> 匿名子类</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Person是抽象类 创建了一匿名子类的对象：p</span>\n\t\t<span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃东西\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">breath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"好好呼吸\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//创建匿名子类的匿名对象</span>\n\t\t<span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃好吃东西\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">breath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"好好呼吸新鲜空气\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tp<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token punctuation\">.</span><span class=\"token function\">breath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"模板方法设计模式\"><a class=\"markdownIt-Anchor\" href=\"#模板方法设计模式\">#</a> 模板方法设计模式</h2>\n<p>当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。</p>\n<p>换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n * 抽象类的应用：模板方法的设计模式\n * \n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TemplateTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token class-name\">SubTemplate</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">spendTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Template</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token comment\">//计算某段代码执行所需要花费的时间</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">spendTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不确定的部分、易变的部分</span>\n\t\t\n\t\t<span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"花费的时间为：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubTemplate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Template</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">boolean</span> isFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tisFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"接口\"><a class=\"markdownIt-Anchor\" href=\"#接口\">#</a> 接口</h2>\n<p>1. 接口使用 interface 来定义</p>\n<p>2.Java 中，接口和类是并列的两个结构</p>\n<p>3. 如何定义接口：定义接口中的成员</p>\n<p>3.1 JDK7 及以前：只能定义全局常量和抽象方法</p>\n<p>全局常量：public static final 的。但是书写时，可以省略不写</p>\n<p>抽象方法：public abstract 的</p>\n<p>3.2 JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略）</p>\n<p>4. 接口中不能定义构造器的！意味着接口不可以实例化</p>\n<p>5.Java 开发中，接口通过让类去实现 (implements) 的方式来使用.</p>\n<p>如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化</p>\n<p>如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</p>\n<p>6.Java 类可以实现多个接口   —&gt; 弥补了 Java 单继承性的局限性</p>\n<p>格式：class AA extends BB implements CC,DD,EE</p>\n<p>7. 接口与接口之间可以继承，而且可以多继承</p>\n<p>8. 接口的具体使用，体现多态性</p>\n<p>9. 接口，实际上可以看做是一种规范</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n * 接口的应用：代理模式\n * \n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NetWorkTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Server</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\t\tserver.browse();</span>\n\t\t<span class=\"token class-name\">ProxyServer</span> proxyServer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProxyServer</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tproxyServer<span class=\"token punctuation\">.</span><span class=\"token function\">browse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">NetWork</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">browse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//被代理类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Server</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NetWork</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">browse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实的服务器访问网络\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//代理类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProxyServer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NetWork</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">NetWork</span> work<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ProxyServer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NetWork</span> work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>work <span class=\"token operator\">=</span> work<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"联网之前的检查工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">browse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\twork<span class=\"token punctuation\">.</span><span class=\"token function\">browse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接口的使用</p>\n<ul>\n<li>1. 接口使用上也满足多态性</li>\n<li>2. 接口，实际上就是定义了一种规范</li>\n<li>3. 开发中，体会面向接口编程！</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">USBTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token class-name\">Computer</span> com <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//1.创建了接口的非匿名实现类的非匿名对象</span>\n\t\t<span class=\"token class-name\">Flash</span> flash <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Flash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcom<span class=\"token punctuation\">.</span><span class=\"token function\">transferData</span><span class=\"token punctuation\">(</span>flash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//2. 创建了接口的非匿名实现类的匿名对象</span>\n\t\tcom<span class=\"token punctuation\">.</span><span class=\"token function\">transferData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Printer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//3. 创建了接口的匿名实现类的非匿名对象</span>\n\t\t<span class=\"token class-name\">USB</span> phone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">USB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机开始工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机结束工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\tcom<span class=\"token punctuation\">.</span><span class=\"token function\">transferData</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t\n\t\t<span class=\"token comment\">//4. 创建了接口的匿名实现类的匿名对象</span>\n\t\t\n\t\tcom<span class=\"token punctuation\">.</span><span class=\"token function\">transferData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">USB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp3开始工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp3结束工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transferData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">USB</span> usb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//USB usb = new Flash();</span>\n\t\tusb<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"具体传输数据的细节\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tusb<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> USB<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//常量：定义了长、宽、最大最小的传输速度等</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flash</span> <span class=\"token keyword\">implements</span> USB<span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"U盘开启工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"U盘结束工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Printer</span> <span class=\"token keyword\">implements</span> USB<span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印机开启工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印机结束工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CompareA</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token comment\">//静态方法</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CompareA:北京\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//默认方法</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CompareA：上海\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CompareA：上海\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CompareB</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CompareB：上海\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SuperClass:北京\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClassTest</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SubClass</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n<span class=\"token comment\">//\t\ts.method1();</span>\n<span class=\"token comment\">//\t\tSubClass.method1();</span>\n\t\t<span class=\"token comment\">//知识点1：接口中定义的静态方法，只能通过接口来调用。</span>\n\t\t<span class=\"token class-name\">CompareA</span><span class=\"token punctuation\">.</span><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//知识点2：通过实现类的对象，可以调用接口中的默认方法。</span>\n\t\t<span class=\"token comment\">//如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，</span>\n\t\t<span class=\"token comment\">//那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。--&gt;类优先原则</span>\n\t\t<span class=\"token comment\">//知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，</span>\n\t\t<span class=\"token comment\">//那么在实现类没有重写此方法的情况下，报错。--&gt;接口冲突。</span>\n\t\t<span class=\"token comment\">//这就需要我们必须在实现类中重写此方法</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CompareA</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">CompareB</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SubClass：上海\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SubClass：深圳\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">//知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用自己定义的重写的方法</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用的是父类中声明的</span>\n\t\t<span class=\"token comment\">//调用接口中的默认方法</span>\n\t\t<span class=\"token class-name\">CompareA</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">CompareB</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2021012223281746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<h2 id=\"内部类\"><a class=\"markdownIt-Anchor\" href=\"#内部类\">#</a> 内部类</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>java2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n * 类的内部成员之五：内部类\n * 1. Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类\n * \n * 2.内部类的分类：成员内部类（静态、非静态）  vs 局部内部类(方法内、代码块内、构造器内)\n * \n * 3.成员内部类：\n * \t\t一方面，作为外部类的成员：\n * \t\t\t&gt;调用外部类的结构\n * \t\t\t&gt;可以被static修饰\n * \t\t\t&gt;可以被4种不同的权限修饰\n * \n * \t\t另一方面，作为一个类：\n * \t\t\t&gt; 类内可以定义属性、方法、构造器等\n * \t\t\t&gt; 可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承\n * \t\t\t&gt; 可以被abstract修饰\n * \n * \n * 4.关注如下的3个问题\n *   4.1 如何实例化成员内部类的对象\n *   4.2 如何在成员内部类中区分调用外部类的结构\n *   4.3 开发中局部内部类的使用  见《InnerClassTest1.java》\n * \n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerClassTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token comment\">//创建Dog实例(静态的成员内部类):</span>\n\t\t<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Dog</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdog<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//创建Bird实例(非静态的成员内部类):</span>\n<span class=\"token comment\">//\t\tPerson.Bird bird = new Person.Bird();//错误的</span>\n\t\t<span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Bird</span> bird <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbird<span class=\"token punctuation\">.</span><span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tbird<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"黄鹂\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"人：吃饭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t\n\t<span class=\"token comment\">//静态成员内部类</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"卡拉是条狗\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\t\t\teat();</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//非静态成员内部类</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"杜鹃\"</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是一只小小鸟\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用外部类的非静态属性</span>\n\t\t\t<span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//方法的形参</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//内部类的属性</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//外部类的属性</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//局部内部类</span>\n\t\t<span class=\"token keyword\">class</span> AA<span class=\"token punctuation\">{</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//局部内部类</span>\n\t\t<span class=\"token keyword\">class</span> BB<span class=\"token punctuation\">{</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//局部内部类</span>\n\t\t<span class=\"token keyword\">class</span> CC<span class=\"token punctuation\">{</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>java2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerClassTest1</span> <span class=\"token punctuation\">{</span>\n\t\n\t\n\t<span class=\"token comment\">//开发中很少见</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//局部内部类</span>\n\t\t<span class=\"token keyword\">class</span> AA<span class=\"token punctuation\">{</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t\n\t<span class=\"token comment\">//返回一个实现了Comparable接口的类的对象</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Comparable</span> <span class=\"token function\">getComparable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token comment\">//创建一个实现了Comparable接口的类:局部内部类</span>\n\t\t<span class=\"token comment\">//方式一：</span>\n<span class=\"token comment\">//\t\tclass MyComparable implements Comparable{</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//\t\t\t@Override</span>\n<span class=\"token comment\">//\t\t\tpublic int compareTo(Object o) {</span>\n<span class=\"token comment\">//\t\t\t\treturn 0;</span>\n<span class=\"token comment\">//\t\t\t}</span>\n<span class=\"token comment\">//\t\t\t</span>\n<span class=\"token comment\">//\t\t}</span>\n<span class=\"token comment\">//\t\t</span>\n<span class=\"token comment\">//\t\treturn new MyComparable();</span>\n\t\t\n\t\t<span class=\"token comment\">//方式二：</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>成员内部类和局部内部类在编译以后，都会生成字节码文件</p>\n<p>成员内部类：外部类 $ 内部类名.class</p>\n<p>局部内部类：外部类名 $ 数字内部类名.class</p>\n<p>在局部内部类的方法中（比如：show）如果调用局部内部类所声明的方法 (比如：method) 中的局部变量 (比如：num) 的话，要求此局部变量声明为 final 的。</p>\n<p>jdk 7 及之前版本：要求此局部变量显式的声明为 final 的</p>\n<p>jdk 8 及之后的版本：可以省略 final 的声明</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2021/01/19/5-mian-xiang-dui-xiang-zhong/",
            "url": "http://fsh010816.github.io/2021/01/19/5-mian-xiang-dui-xiang-zhong/",
            "title": "5-面向对象(中)",
            "date_published": "2021-01-19T12:34:49.000Z",
            "content_html": "<h1 id=\"面向对象中\"><a class=\"markdownIt-Anchor\" href=\"#面向对象中\">#</a> 面向对象 (中)</h1>\n<h2 id=\"继承性\"><a class=\"markdownIt-Anchor\" href=\"#继承性\">#</a> 继承性</h2>\n<h3 id=\"好处\"><a class=\"markdownIt-Anchor\" href=\"#好处\">#</a> 好处</h3>\n<p>1. 继承的出现减少了代码冗余，提高了代码的复用性。<br>\n2. 继承的出现，更有利于功能的扩展。<br>\n3. 继承的出现让类与类之间产生了关系，提供了多态的前提。</p>\n<h3 id=\"格式\"><a class=\"markdownIt-Anchor\" href=\"#格式\">#</a> 格式</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2.1 体现：一旦子类 A 继承父类 B 以后，子类 A 中就获取了父类 B 中声明的所有的属性和方法。特别的，父类中声明为 private 的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。只有因为封装性的影响，使得子类不能直接调用父类的结构而已。</p>\n<p>2.2 子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。子类和父类的关系，不同于子集和集合的关系。extends：延展、扩展</p>\n<p>三、Java 中关于继承性的规定：</p>\n<p>1. 一个类可以被多个子类继承。</p>\n<p>2.Java 中类的单继承性：一个类只能有一个父类</p>\n<p>3. 子父类是相对的概念。</p>\n<p>4. 子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类</p>\n<p>5. 子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法</p>\n<p>四、</p>\n<p>1. 如果我们没有显式的声明一个类的父类的话，则此类继承于 java.lang.Object 类</p>\n<p>2. 所有的 java 类（除 java.lang.Object 类之外）都直接或间接的继承于 java.lang.Object 类</p>\n<p>3. 意味着，所有的 java 类具有 java.lang.Object 类声明的功能。</p>\n<h2 id=\"重写\"><a class=\"markdownIt-Anchor\" href=\"#重写\">#</a> 重写</h2>\n<h3 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h3>\n<p>在子类中可以根据需要对从父类中继承来的方法进行改造，也称为方法的重置、覆盖。在程序执行时，子类的方法将覆盖父类的方法。</p>\n<h3 id=\"规定\"><a class=\"markdownIt-Anchor\" href=\"#规定\">#</a> 规定</h3>\n<p>方法的声明：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">权限修饰符  返回值类型  方法名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> 异常的类型<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//方法体</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法</p>\n<p>① 子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同</p>\n<p>② 子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</p>\n<p>特殊情况：子类不能重写父类中声明为 private 权限的方法</p>\n<p>③ 返回值类型：</p>\n<p>父类被重写的方法的返回值类型是 void，则子类重写的方法的返回值类型只能是 void</p>\n<p>父类被重写的方法的返回值类型是 A 类型，则子类重写的方法的返回值类型可以是 A 类或 A 类的子类</p>\n<p>父类被重写的方法的返回值类型是基本数据类型 (比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型 (必须也是 double)</p>\n<p>④ 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p>\n<p>子类和父类中的同名同参数的方法要么都声明为非 static 的（考虑重写），要么都声明为 static 的（不是重写）。</p>\n<h2 id=\"super\"><a class=\"markdownIt-Anchor\" href=\"#super\">#</a> super</h2>\n<p>super 关键字的使用</p>\n<p>1.super 理解为：父类的</p>\n<p>2.super 可以用来调用：属性、方法、构造器</p>\n<p>3.super 的使用：调用属性和方法</p>\n<p>3.1 我们可以在子类的方法或构造器中。通过使用 \"super. 属性\" 或 \"super. 方法\" 的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略 \"super.\"</p>\n<p>3.2 特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用 \"super. 属性\" 的方式，表明调用的是父类中声明的属性。</p>\n<p>3.3 特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用 \"super. 方法\" 的方式，表明调用的是父类中被重写的方法。</p>\n<p>4.super 调用构造器</p>\n<p>4.1  我们可以在子类的构造器中显式的使用 \"super (形参列表)\" 的方式，调用父类中声明的指定的构造器</p>\n<p>4.2 \"super (形参列表)\" 的使用，必须声明在子类构造器的首行！</p>\n<p>4.3 我们在类的构造器中，针对于 \"this (形参列表)\" 或 \"super (形参列表)\" 只能二选一，不能同时出现</p>\n<p>4.4 在构造器的首行，没有显式的声明 \"this (形参列表)“或\"super (形参列表)”，则默认调用的是父类中空参的构造器：super ()</p>\n<p>4.5 在类的多个构造器中，至少有一个类的构造器中使用了 \"super (形参列表)\"，调用父类中的构造器</p>\n<p>如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译出错</p>\n<h2 id=\"子类对象实例化的全过程\"><a class=\"markdownIt-Anchor\" href=\"#子类对象实例化的全过程\">#</a> 子类对象实例化的全过程</h2>\n<p>1. 从结果上来看：（继承性）</p>\n<p>子类继承父类以后，就获取了父类中声明的属性或方法。</p>\n<p>创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。</p>\n<p>2. 从过程上来看：</p>\n<p>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，… 直到调用了 java.lang.Object 类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有父类中的结构，子类对象才可以考虑进行调用。</p>\n<p>明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为 new 的子类对象。</p>\n<h2 id=\"多态性\"><a class=\"markdownIt-Anchor\" href=\"#多态性\">#</a> 多态性</h2>\n<p>1. 何为多态性：</p>\n<p>对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p>\n<p>2. 多态的使用：虚拟方法调用</p>\n<p>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</p>\n<p>子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。</p>\n<p>总结：编译，看左边；运行，看右边。</p>\n<p>3. 多态性的使用前提：  ① 类的继承关系  ② 方法的重写</p>\n<p>4. 对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</p>\n<p>5.Java 引用变量有两个类型： 编译时类型和 运行时类型。编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。简称：编译时，看左边；运行时，看右边。</p>\n<p>若编译时类型和运行时类型不一致 ， 就出现了对象的多态性</p>\n<p>多态是运行时行为</p>\n<p>6. 一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就 不能 再访问子类中添加的属性和方法</p>\n<p>7. 若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统将不可能把父类里的方法转移到子类中：编译看左边，运行看右边</p>\n<p>对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量：编译运行都看左边</p>\n<h2 id=\"方法的重载与重写\"><a class=\"markdownIt-Anchor\" href=\"#方法的重载与重写\">#</a> 方法的重载与重写</h2>\n<ol>\n<li>二者的定义细节：略</li>\n<li>从编译和运行的角度看：<br>\n重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java 的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。<br>\n所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为 “早绑定” 或 “静态绑定”；而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为 “晚绑定” 或 “动态绑定”。</li>\n</ol>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> ==</h2>\n<p>==：对于引用数据类型来讲，比较的是两个引用数据类型变量的地址值是否相同</p>\n<h2 id=\"instanceof\"><a class=\"markdownIt-Anchor\" href=\"#instanceof\">#</a> instanceof</h2>\n<p>a instanceof A: 判断对象 a 是否是类 A 的实例。如果是，返回 true；如果不是，返回 false。</p>\n<p>要求 a 所属的类与类 A 必须是子类和父类的关系，否则编译错误</p>\n<p>如果 a 属于类 A 的子类 B，a instanceof A 值也为 true</p>\n<p>使用情境：为了避免在向下转型时出现 ClassCastException 的异常，我们在向下转型之前，先进行 instanceof 的判断，一旦返回 true，就进行向下转型。如果返回 false，不进行向下转型。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210120211434690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<h2 id=\"javalangobject类\"><a class=\"markdownIt-Anchor\" href=\"#javalangobject类\">#</a> java.lang.Object 类</h2>\n<p>1.Object 类是所有 Java 类的根父类</p>\n<p>2. 如果在类的声明中未使用 extends 关键字指明其父类，则默认父类为 java.lang.Object 类</p>\n<p>3.Object 类中的功能 (属性、方法) 就具有通用性。</p>\n<p>属性：无</p>\n<p>方法：equals () /toString () /getClass () /hashCode () /clone () /finalize ()、wait () 、 notify ()、notifyAll ()</p>\n<p>4.Object 类只声明了一个空参的构造器</p>\n<p>数组的父类是 Object</p>\n<h2 id=\"equals\"><a class=\"markdownIt-Anchor\" href=\"#equals\">#</a> == equals()</h2>\n<h3 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\">#</a> ==</h3>\n<p>== ：运算符</p>\n<p>1. 可以使用在基本数据类型变量和引用数据类型变量中</p>\n<p>2. 如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同）</p>\n<p>如果比较的是引用数据类型变量：比较两个对象的地址值是否相同。即两个引用是否指向同一个对象实体</p>\n<p>补充： == 符号使用时，必须保证符号左右两边的变量类型一致。</p>\n<h3 id=\"equals方法的使用\"><a class=\"markdownIt-Anchor\" href=\"#equals方法的使用\">#</a> equals () 方法的使用</h3>\n<p>1. 是一个方法，而非运算符</p>\n<p>2. 只能适用于引用数据类型</p>\n<p>3.Object 类中 equals () 的定义：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>说明：Object 类中定义的 equals () 和 == 的作用是相同的：比较两个对象的地址值是否相同。即两个引用是否指向同一个对象实体</p>\n<p>4. 像 String、Date、File、包装类等都重写了 Object 类中的 equals () 方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的 \"实体内容\" 是否相同。</p>\n<p>5. 通常情况下，我们自定义的类如果使用 equals () 的话，也通常是比较两个对象的 \"实体内容\" 是否相同。那么，我们就需要对 Object 类中的 equals () 进行重写.</p>\n<p>重写的原则：比较两个对象的实体内容是否相同.</p>\n<h2 id=\"tostring\"><a class=\"markdownIt-Anchor\" href=\"#tostring\">#</a> toString()</h2>\n<p>1. 当我们输出一个对象的引用时，实际上就是调用当前对象的 toString ()</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\ns <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//null</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//空指针异常</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2.Object 类中 toString () 的定义：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"@\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>3. 像 String、Date、File、包装类等都重写了 Object 类中的 toString () 方法。使得在调用对象的 toString () 时，返回 \"实体内容\" 信息</p>\n<p>4. 自定义类也可以重写 toString () 方法，当调用此方法时，返回对象的 \"实体内容\"</p>\n<p>toString () 方法在 Object 类中定义 ，其返回值是 String 类型 ， 返回类名和它的引用地址 。<br>\n在进行 String 与其它类型数据的连接操作时 ，调用了自动调用 toString () 方法</p>\n<p>基本类型数据转换为 String 类型时 ，调用了对应包装类的 toString () 方法</p>\n<h2 id=\"包装类\"><a class=\"markdownIt-Anchor\" href=\"#包装类\">#</a> 包装类</h2>\n<p>java 提供了 8 种基本数据类型对应的包装类，使得基本数据类型的变量具有类的特征</p>\n<img src=\"https://img-blog.csdnimg.cn/20210121161225569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom:50%;\">\n<p>String 类型 —&gt; 基本数据类型、包装类：调用包装类的 parseXxx (String s)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>通过包装类的构造器实现:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>“<span class=\"token number\">12</span>”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>基本数据类型、包装类 —&gt;String 类型：调用 String 重载的 valueOf (Xxx xxx)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//方式1：连接运算</span>\n<span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//方式2：调用String的valueOf(Xxx xxx)</span>\n<span class=\"token keyword\">float</span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">12.3f</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"12.3\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>基本数据类型 —&gt; 包装类：调用包装类的构造器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> in1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>in1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Integer</span> in2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//通过字符串参数构造包装类对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>in2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Boolean</span> b3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>自动装箱：基本数据类型 —&gt; 包装类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> in1 <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">;</span><span class=\"token comment\">//自动装箱</span>\n<span class=\"token keyword\">int</span> num3 <span class=\"token operator\">=</span> in1<span class=\"token punctuation\">;</span><span class=\"token comment\">//自动拆箱</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>包装类 —&gt; 基本数据类型：调用包装类 Xxx 的 xxxValue ()</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Integer</span> in1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> in1<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>自动拆箱：包装类 —&gt; 基本数据类型</p>\n<p>面试题</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Integer内部定义了IntegerCache结构，IntegerCache中定义了Integer[],</span>\n<span class=\"token comment\">//保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在</span>\n<span class=\"token comment\">//-128~127范围内时，可以直接使用数组中的元素，不用再去new了。目的：提高效率</span>\n\n<span class=\"token class-name\">Integer</span> m <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n\n<span class=\"token class-name\">Integer</span> x <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//相当于new了一个Integer对象</span>\n<span class=\"token class-name\">Integer</span> y <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//相当于new了一个Integer对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20210121161225670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2021/01/18/4-mian-xiang-dui-xiang-shang/",
            "url": "http://fsh010816.github.io/2021/01/18/4-mian-xiang-dui-xiang-shang/",
            "title": "4-面向对象(上)",
            "date_published": "2021-01-18T07:02:37.000Z",
            "content_html": "<h1 id=\"面向对象上\"><a class=\"markdownIt-Anchor\" href=\"#面向对象上\">#</a> 面向对象 (上)</h1>\n<h2 id=\"类class和对象object\"><a class=\"markdownIt-Anchor\" href=\"#类class和对象object\">#</a> 类 (Class) 和对象 (Object)</h2>\n<p>类是对一类事物的描述，是抽象的、概念上的定义<br>\n对象是实际存在的该类事物的每个个体，因而也称为实例 (instance)。</p>\n<h3 id=\"类的成员\"><a class=\"markdownIt-Anchor\" href=\"#类的成员\">#</a> 类的成员</h3>\n<p>1 &gt; 属  性：对应类中的成员变量<br>\n 2 &gt; 行  为：对应类中的成员方法</p>\n<p>Field =  属性 =  成员变量 = 域、字段，Method = (成员) 方法 =  函数</p>\n<p>创建类的对象 = 类的实例化 = 实例化类</p>\n<h3 id=\"类和对象的使用\"><a class=\"markdownIt-Anchor\" href=\"#类和对象的使用\">#</a> 类和对象的使用</h3>\n<p>1. 创建类，设计类的成员</p>\n<p>2. 创建类的对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">类名 对象名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 类名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>3. 通过 “对象。属性” 或 “对象。方法” 调用对象的结构</p>\n<p>类的访问机制:</p>\n<p>在一个类中的访问机制：类中的方法可以直接访问类中的成员变量 。</p>\n<p> 在不同类中的访问机制：先创建要访问类的对象 ， 再用对象访问类中定义的成员 。</p>\n<h2 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\">#</a> 类</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">修饰符 <span class=\"token keyword\">class</span>  类名 <span class=\"token punctuation\">{</span>\n    属性声明<span class=\"token punctuation\">;</span>\n    方法声明<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类的正文要用 { } 括起来</p>\n<h2 id=\"内存解析\"><a class=\"markdownIt-Anchor\" href=\"#内存解析\">#</a> 内存解析</h2>\n<p>编译完程序以后，生成一个或多个字节码文件，</p>\n<p>我们使用 JVM 中的类的加载器和解释器对生成的字节码文件进行解释运行，意味着，需要将字节码文件对应的类加载到内存中，涉及到内存解析。</p>\n<p>堆： 存放对象实例  对象的属性（非 static）new 出来的结构 对象（非 static 成员变量）数组</p>\n<p>栈： 存储局部变量</p>\n<p>方法区（Method Area）：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。 常量池 静态域</p>\n<h2 id=\"对象的内存解析\"><a class=\"markdownIt-Anchor\" href=\"#对象的内存解析\">#</a> 对象的内存解析</h2>\n<img src=\"https://img-blog.csdnimg.cn/20210118191251477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"未考虑常量池\" style=\"zoom:50%;\">\n<p>引用类型的变量，只可能存储两类值：null  或  地址值（含变量的类型）</p>\n<h2 id=\"匿名对象\"><a class=\"markdownIt-Anchor\" href=\"#匿名对象\">#</a> 匿名对象</h2>\n<p>我们也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。<br>\n如：new Person ().shout ();</p>\n<p>使用情况<br>\n 1. 如果对一个对象只需要进行一次方法调用，那么就可以使用匿名对象。<br>\n2. 我们经常将匿名对象作为实参传递给一个方法调用。</p>\n<h2 id=\"属性成员变量-局部变量\"><a class=\"markdownIt-Anchor\" href=\"#属性成员变量-局部变量\">#</a> 属性 (成员变量) 局部变量</h2>\n<p>属性语法格式:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">修饰符 数据类型 属性名 <span class=\"token operator\">=</span> 初始化值<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<img src=\"https://img-blog.csdnimg.cn/20210118191737642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" style=\"zoom: 80%;\">\n<p>对象属性的默认初始化赋值：当一个对象被创建时，会对其中各种类型的成员变量自动进行初始化赋值。</p>\n<h3 id=\"相同点\"><a class=\"markdownIt-Anchor\" href=\"#相同点\">#</a> 相同点</h3>\n<p>1. 定义变量的格式：数据类型 变量名 = 变量值</p>\n<p>2. 先声明，后使用</p>\n<p>3. 变量都有其对应的作用域</p>\n<h3 id=\"不同点\"><a class=\"markdownIt-Anchor\" href=\"#不同点\">#</a> 不同点</h3>\n<p>1. 在类中声明的位置不同</p>\n<p>成员变量：在方法体外，类体内声明的变量</p>\n<p>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</p>\n<p>2. 关于权限修饰符的不同</p>\n<p>属性：可以在声明属性时，指明其权限，使用权限修饰符</p>\n<p>​\t\t\tprivate、public、缺省、protected</p>\n<p>局部变量：不可使用权限修饰符</p>\n<p>3. 默认初始化值</p>\n<p>属性：根据其类型，都有默认初始化值</p>\n<p>局部变量：没有默认初始化值</p>\n<p>​\t\t\t\t\t调用局部变量前，必须显示赋值</p>\n<p>​\t\t\t\t\t特别地，形参在调用时，赋值即可</p>\n<p>4. 在内存中加载的位置</p>\n<p>属性：堆（非 static）</p>\n<p>局部变量：栈</p>\n<h2 id=\"方法\"><a class=\"markdownIt-Anchor\" href=\"#方法\">#</a> 方法</h2>\n<p>Java 里的方法不能独立存在，所有的方法必须定义在类里。</p>\n<h3 id=\"声明\"><a class=\"markdownIt-Anchor\" href=\"#声明\">#</a> 声明</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">修饰符  返回值类型  方法名 （参数类型 形参<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>参数类型 形参<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> …）｛\n    方法体程序代码\n    <span class=\"token keyword\">return</span>  返回值<span class=\"token punctuation\">;</span>\n｝<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>返回值类型：</p>\n<p>​\t没有返回值：void。 如果使用 return, 只能 \"return;\"，表示结束此方法的意思</p>\n<p>​\t有返回值，声明出返回值的类型。</p>\n<h3 id=\"tips\"><a class=\"markdownIt-Anchor\" href=\"#tips\">#</a> tips</h3>\n<p>方法的使用中，可以调用当前类的属性或方法</p>\n<p>​\t（例外：static 方法访问非 static，编译不通过 。）</p>\n<p>方法中，不可以定义方法</p>\n<p>定义方法时，方法的结果应该返回给调用者，交由调用者处理。</p>\n<h3 id=\"重载\"><a class=\"markdownIt-Anchor\" href=\"#重载\">#</a> 重载</h3>\n<p>概念：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</p>\n<h3 id=\"可变个数的形参\"><a class=\"markdownIt-Anchor\" href=\"#可变个数的形参\">#</a> 可变个数的形参</h3>\n<p>JavaSE 5.0 中提供了 Varargs (variable number of arguments) 机制，允许直接定义能和多个实参相匹配的形参。从而，可以用一种更简单的方式，来传递个数可变的实参。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span>…books<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>声明格式：方法名 (参数的类型名 … 参数名) 此参数名也有 length 属性</p>\n<p>可变参数：方法参数部分指定类型的参数个数是可变多个：0 个，1 个或多个</p>\n<p>可变参数方法的使用与方法参数部分使用数组是一致的</p>\n<p>可变个数形参的方法与同名的方法之间，彼此构成重载</p>\n<p>方法的参数部分有可变形参，需要放在形参声明的最后</p>\n<p>可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存。</p>\n<h3 id=\"方法参数的值传递机制\"><a class=\"markdownIt-Anchor\" href=\"#方法参数的值传递机制\">#</a> 方法参数的值传递机制</h3>\n<p>Java 里方法的参数传递方式只有一种：值传递。 即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。\t<br>\n形参是基本数据类型：将实参基本数据类型变量的 “数据值” 传递给形参<br>\n形参是引用数据类型：将实参引用数据类型变量的 “地址值” 传递给形参</p>\n<h2 id=\"封装和隐藏\"><a class=\"markdownIt-Anchor\" href=\"#封装和隐藏\">#</a> 封装和隐藏</h2>\n<p>信息的封装和隐藏</p>\n<p>Java 中通过将数据声明为私有的 (private)，再提供公共的（public）方法:getXxx () 和 setXxx () 实现对该属性的操作，以实现下述目的：<br>\n隐藏一个类中不需要对外提供的实现细节；<br>\n使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；<br>\n便于修改，增强代码的可维护性</p>\n<h3 id=\"体现\"><a class=\"markdownIt-Anchor\" href=\"#体现\">#</a> 体现</h3>\n<p>1. 将类的属性私有化，同时，提供公共的方法来获取 (get) 和设置 (set) 此属性的值</p>\n<p>2. 不对外暴露的私有的方法</p>\n<p>3. 单例模式 (将构造器私有化)</p>\n<p>4. 如果不希望类在包外被调用，可以将类设置为私有的</p>\n<h3 id=\"权限修饰符\"><a class=\"markdownIt-Anchor\" href=\"#权限修饰符\">#</a> 权限修饰符</h3>\n<p>4 种权限修饰符都可以修饰类的内部结构：属性、方法、构造器、内部类</p>\n<p>修饰类，只能用：缺省和 public</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210119101911903.png#pic_center\" alt=\"\"></p>\n<h2 id=\"构造器\"><a class=\"markdownIt-Anchor\" href=\"#构造器\">#</a> 构造器</h2>\n<h3 id=\"构造器的特征\"><a class=\"markdownIt-Anchor\" href=\"#构造器的特征\">#</a> 构造器的特征</h3>\n<p>它具有与类相同的名称<br>\n它不声明返回值类型。（与声明为 void 不同）<br>\n不能被 static、final、synchronized、abstract、native 修饰，不能有 return 语句返回值</p>\n<h3 id=\"构造器的作用\"><a class=\"markdownIt-Anchor\" href=\"#构造器的作用\">#</a> 构造器的作用</h3>\n<p>创建对象；给对象进行初始化</p>\n<p>如：Order o = new Order (); Person p = new Person (“Peter”,15);</p>\n<h3 id=\"语法格式\"><a class=\"markdownIt-Anchor\" href=\"#语法格式\">#</a> 语法格式 ：</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">修饰符名 类名 <span class=\"token punctuation\">(</span> 参数列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t初始化语句；\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>根据参数不同，构造器可以分为如下两类：<br>\n 隐式无参构造器（系统默认提供）<br>\n 显式定义一个或多个（无参、有参）</p>\n<h3 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意：</h3>\n<p>Java 语言中，每个类都至少有一个 构造器<br>\n 默认构造器的修饰符与所属类的修饰符一致<br>\n 一旦 显式定义了 构造器， 则系统 不再 提供默认 构造 器<br>\n 一个类可以创建多个 重载 的构造器<br>\n 父类的构造器不可被子类继承</p>\n<h2 id=\"属性赋值过程\"><a class=\"markdownIt-Anchor\" href=\"#属性赋值过程\">#</a> 属性赋值过程</h2>\n<p>赋值的位置：<br>\n① 默认初始化<br>\n② 显式初始化<br>\n③ 构造器中初始化<br>\n④ 通过 “对象。属性 “或 “对象。方法” 的方式赋值</p>\n<p>赋值的先后顺序：① - ② - ③ - ④</p>\n<h2 id=\"javabean\"><a class=\"markdownIt-Anchor\" href=\"#javabean\">#</a> JavaBean</h2>\n<p>JavaBean 是一种 Java 语言写成的可重用组件。</p>\n<p>所谓 javaBean，是指符合如下标准的 Java 类：<br>\n类是公共的<br>\n有一个无参的公共的构造器<br>\n有属性，且有对应的 get、set 方法</p>\n<h2 id=\"this\"><a class=\"markdownIt-Anchor\" href=\"#this\">#</a> this</h2>\n<ul>\n<li>this 关键字的使用：</li>\n<li>1.this 可以用来修饰、调用：属性、方法、构造器</li>\n<li>2.this 修饰属性和方法：\n<ul>\n<li>this 理解为：当前对象  或 当前正在创建的对象</li>\n</ul>\n</li>\n<li>2.1  在类的方法中，我们可以使用 \"this. 属性\" 或 \"this. 方法\" 的方式，调用当前对象属性或方法。但是，通常情况下，我们都选择省略 \"this.\"。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式的使用 \"this. 变量\" 的方式，表明此变量是属性，而非形参。</li>\n<li>2.2 在类的构造器中，我们可以使用 \"this. 属性\" 或 \"this. 方法\" 的方式，调用当前正在创建的对象属性或方法。但是，通常情况下，我们都选择省略 \"this.\"。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式的使用 \"this. 变量\" 的方式，表明此变量是属性，而非形参。</li>\n<li>2.3 使用 this 访问属性和方法时，如果在本类中未找到，会从父类中查找</li>\n<li>\n<ol start=\"3\">\n<li>this 调用构造器</li>\n</ol>\n</li>\n<li>① 我们在类的构造器中，可以显式的使用 \"this (形参列表)\" 方式，调用本类中指定的其他构造器</li>\n<li>② 构造器中不能通过 \"this (形参列表)\" 方式调用自己</li>\n<li>③ 如果一个类中有 n 个构造器，则最多有 n - 1 构造器中使用了 \"this (形参列表)\"</li>\n<li>④ 规定：\"this (形参列表)\" 必须声明在当前构造器的首行</li>\n<li>⑤ 构造器内部，最多只能声明一个 \"this (形参列表)\"，用来调用其他的构造器</li>\n</ul>\n<h2 id=\"package\"><a class=\"markdownIt-Anchor\" href=\"#package\">#</a> package</h2>\n<p>package 语句作为 Java 源文件的第一条语句，指明该文件中定义的类所在的包。(若缺省该语句，则指定为无名包)。它的格式为：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span>  顶层包名<span class=\"token punctuation\">.</span>子包名<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>同一个包下，不能命名同名的接口、类。</p>\n<h2 id=\"import\"><a class=\"markdownIt-Anchor\" href=\"#import\">#</a> import</h2>\n<ol>\n<li>\n<p>在源文件中使用 import 显式的导入指定包下的类或接口</p>\n</li>\n<li>\n<p>如果已经导入 java.a 包下的类。那么如果需要使用 a 包的子包下的类的话，仍然需要导入。使用 \"xxx.*\" 方式表明可以调用 xxx 包下的所有结构。但是如果使用的是 xxx 子包下的结构，则仍需要显式导入</p>\n</li>\n<li>\n<p>import static 组合的使用：调用指定类或接口下的静态的属性或方法</p>\n</li>\n<li>\n<p>如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示。</p>\n</li>\n<li>\n<p>如果使用的类或接口是 java.lang 包下定义的，则可以省略 import 结构</p>\n<ol>\n<li>如果使用的类或接口是本包下定义的，则可以省略 import 结构</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\nout<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2021/01/13/3-shu-zu/",
            "url": "http://fsh010816.github.io/2021/01/13/3-shu-zu/",
            "title": "3-数组",
            "date_published": "2021-01-13T13:47:11.000Z",
            "content_html": "<h1 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h1>\n<h2 id=\"数组的概述\"><a class=\"markdownIt-Anchor\" href=\"#数组的概述\">#</a> 数组的概述</h2>\n<p>1 &gt; 数组本身是引用数据类型，而数组中的元素可以是任何数据类型，包括基本数据类型和引用数据类型。<br>\n2 &gt; 创建数组对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址。<br>\n3 &gt; 数组的长度一旦确定，就不能修改。</p>\n<h2 id=\"一维数组\"><a class=\"markdownIt-Anchor\" href=\"#一维数组\">#</a> 一维数组</h2>\n<h3 id=\"声明\"><a class=\"markdownIt-Anchor\" href=\"#声明\">#</a> 声明</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">type <span class=\"token keyword\">var</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 或 type<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">var</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Java 语言中声明数组时不能指定其长度 (数组中元素的数)</p>\n<h3 id=\"初始化\"><a class=\"markdownIt-Anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<h4 id=\"静态初始化\"><a class=\"markdownIt-Anchor\" href=\"#静态初始化\">#</a> 静态初始化</h4>\n<p>静态初始化 ：在定义数组的同时就为数组元素分配空间并赋值。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n或\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"动态初始化\"><a class=\"markdownIt-Anchor\" href=\"#动态初始化\">#</a> 动态初始化</h4>\n<p>动态初始化 ：数组声明且为数组元素分配空间与赋值的操作分开进行</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"数组元素的引用\"><a class=\"markdownIt-Anchor\" href=\"#数组元素的引用\">#</a> 数组元素的引用</h4>\n<p>定义并用运算符 new 为之分配空间后，才可以引用数组中的每个元素</p>\n<p>数组元素下标可以是整型常量或整型表达式</p>\n<p>数组元素下标从 0 开始</p>\n<h4 id=\"数组元素的默认初始化值\"><a class=\"markdownIt-Anchor\" href=\"#数组元素的默认初始化值\">#</a> 数组元素的默认初始化值</h4>\n<p>数组是引用类型，它的元素相当于类的成员变量，因此数组一经分配空间，其中的每个元素也被按照成员变量同样的方式被隐式初始化</p>\n<h4 id=\"内存解析\"><a class=\"markdownIt-Anchor\" href=\"#内存解析\">#</a> 内存解析</h4>\n<img src=\"https://img-blog.csdnimg.cn/20210113225522456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom:50%;\">\n<img src=\"https://img-blog.csdnimg.cn/20210113225522474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom:50%;\">\n<img src=\"https://img-blog.csdnimg.cn/20210113225522534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"未考虑String...常量池\" style=\"zoom:50%;\">\n<h2 id=\"多维数组\"><a class=\"markdownIt-Anchor\" href=\"#多维数组\">#</a> 多维数组</h2>\n<h3 id=\"二维数组的声明和初始化\"><a class=\"markdownIt-Anchor\" href=\"#二维数组的声明和初始化\">#</a> 二维数组的声明和初始化</h3>\n<p>静态初始化</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//类型推断，只能一行时使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意特殊写法情况：int [] x,y []; x 是一维数组，y 是二维数组。</p>\n<p>动态初始化 1</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//一维数组地址</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>动态初始化 2</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//null</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//非法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"数组元素的默认初始化值-2\"><a class=\"markdownIt-Anchor\" href=\"#数组元素的默认初始化值-2\">#</a> 数组元素的默认初始化值</h3>\n<p>针对于初始化方式一：比如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>外层元素的初始化值为：地址值</p>\n<p>内层元素的初始化值为：与一维数组初始化情况相同</p>\n<p>针对于初始化方式二：比如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>外层元素的初始化值为：null</p>\n<p>内层元素的初始化值为：不能调用，否则报错。</p>\n<h2 id=\"二分法查找\"><a class=\"markdownIt-Anchor\" href=\"#二分法查找\">#</a> 二分法查找</h2>\n<p>前提：所要查找的数组有序</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> arr1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span><span class=\"token number\">88</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> head <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始的索引</span>\n<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始的末索引</span>\n<span class=\"token keyword\">boolean</span> isFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> middle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dest <span class=\"token operator\">==</span> arr1<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"找到了，位置:\"</span><span class=\"token operator\">+</span>middle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        isFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        end <span class=\"token operator\">=</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        head <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没找到\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"排序算法\"><a class=\"markdownIt-Anchor\" href=\"#排序算法\">#</a> 排序算法</h2>\n<h3 id=\"衡量排序算法的优劣\"><a class=\"markdownIt-Anchor\" href=\"#衡量排序算法的优劣\">#</a> 衡量排序算法的优劣</h3>\n<p>1. 时间复杂度</p>\n<p>2. 空间复杂度</p>\n<p>3. 稳定性：若两个记录 A 和 B 的关键字值相等，但排序后 A、B 的先后次序保持不变，则称这种排序算法是稳定的。</p>\n<h3 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\">#</a> 分类</h3>\n<p>排序算法分类： 内部排序 和 外部排序 。<br>\n内部排序：整个排序过程不需要借助于外部存储器（如磁盘等），所有排序操作都在内存中完成。<br>\n外部排序：参与排序的数据非常多，数据量非常大，计算机无法把整个排序过程放在内存中完成，必须借助于外部存储器（如磁盘）。外部排序最常见的是多路归并排序。可以认为外部排序是由多次内部排序组成。</p>\n<h3 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h3>\n<p>排序思想：</p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较为止。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//冒泡排序</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"快速排序\"><a class=\"markdownIt-Anchor\" href=\"#快速排序\">#</a> 快速排序</h3>\n<h2 id=\"arrays工具类的使用\"><a class=\"markdownIt-Anchor\" href=\"#arrays工具类的使用\">#</a> Arrays 工具类的使用</h2>\n<p>java.util.Arrays</p>\n<p>1 boolean equals (int [] a,int [] b) 判断两个数组是否相等。<br>\n2 String toString (int [] a) 输出数组信息。<br>\n3 void fill (int [] a,int val) 将指定值填充到数组之中。<br>\n4 void sort (int [] a) 对数组进行排序。<br>\n5 int binarySearch (int [] a,int key) 对排序后的数组进行二分法检索指定的值。</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2021/01/12/eclipse/",
            "url": "http://fsh010816.github.io/2021/01/12/eclipse/",
            "title": "Eclipse",
            "date_published": "2021-01-12T14:04:56.000Z",
            "content_html": "<h1 id=\"eclipse\"><a class=\"markdownIt-Anchor\" href=\"#eclipse\">#</a> Eclipse</h1>\n<h2 id=\"结构\"><a class=\"markdownIt-Anchor\" href=\"#结构\">#</a> 结构</h2>\n<p>左侧： 结构 1： Package Explorer</p>\n<p>​\t\t\t结构 2 ：Navigator</p>\n<p>​\t\t\t结构 3：Outline</p>\n<p>下面：结构 :4: Console</p>\n<h2 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h2>\n<h3 id=\"字符\"><a class=\"markdownIt-Anchor\" href=\"#字符\">#</a> 字符</h3>\n<img src=\"https://img-blog.csdnimg.cn/20210112231459944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom: 50%;\">\n<img src=\"https://img-blog.csdnimg.cn/20210112231500142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom:50%;\">\n<h3 id=\"字体\"><a class=\"markdownIt-Anchor\" href=\"#字体\">#</a> 字体</h3>\n<img src=\"https://img-blog.csdnimg.cn/2021011223150090.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom:50%;\">\n<img src=\"https://img-blog.csdnimg.cn/2021011223151324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom:50%;\">\n<h3 id=\"修改new菜单\"><a class=\"markdownIt-Anchor\" href=\"#修改new菜单\">#</a> 修改 new 菜单</h3>\n<img src=\"https://img-blog.csdnimg.cn/20210112231512964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom:50%;\">\n<img src=\"https://img-blog.csdnimg.cn/2021011223151355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom:50%;\">\n<img src=\"https://img-blog.csdnimg.cn/2021011223151330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"保存\" style=\"zoom:50%;\">\n<h2 id=\"helloworld\"><a class=\"markdownIt-Anchor\" href=\"#helloworld\">#</a> helloworld</h2>\n<p>先 new Java Project</p>\n<p>在 src 下 new package</p>\n<p>在包下 new class</p>\n<h2 id=\"导入工程\"><a class=\"markdownIt-Anchor\" href=\"#导入工程\">#</a> 导入工程</h2>\n<img src=\"https://img-blog.csdnimg.cn/20210112235144400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom: 50%;\">\n<img src=\"https://img-blog.csdnimg.cn/20210112235144428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" style=\"zoom:50%;\">\n<h2 id=\"提示功能\"><a class=\"markdownIt-Anchor\" href=\"#提示功能\">#</a> 提示功能</h2>\n<p>windows preferences</p>\n<img src=\"https://img-blog.csdnimg.cn/20210120121905464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" style=\"zoom:50%;\">\n<p>. 改成 a-z.</p>\n<h2 id=\"快捷键设置\"><a class=\"markdownIt-Anchor\" href=\"#快捷键设置\">#</a> 快捷键设置</h2>\n<p>windows preferences 搜索 keys</p>\n<h2 id=\"快捷键\"><a class=\"markdownIt-Anchor\" href=\"#快捷键\">#</a> 快捷键</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n * Eclipse中的快捷键：\n * 1.补全代码的声明：alt + /\n * 2.快速修复: ctrl + 1  \n * 3.批量导包：ctrl + shift + o\n * 4.使用单行注释：ctrl + /\n * 5.使用多行注释： ctrl + shift + /   \n * 6.取消多行注释：ctrl + shift + \\\n * 7.复制指定行的代码：ctrl + alt + down 或 ctrl + alt + up\n * 8.删除指定行的代码：ctrl + d\n * 9.上下移动代码：alt + up  或 alt + down\n * 10.切换到下一行代码空位：shift + enter\n * 11.切换到上一行代码空位：ctrl + shift + enter\n * 12.如何查看源码：ctrl + 选中指定的结构   或  ctrl + shift + t\n * 13.退回到前一个编辑的页面：alt + left \n * 14.进入到下一个编辑的页面(针对于上面那条来说的)：alt + right\n * 15.光标选中指定的类，查看继承树结构：ctrl + t\n * 16.复制代码： ctrl + c\n * 17.撤销： ctrl + z\n * 18.反撤销： ctrl + y\n * 19.剪切：ctrl + x \n * 20.粘贴：ctrl + v\n * 21.保存： ctrl + s\n * 22.全选：ctrl + a\n * 23.格式化代码： ctrl + shift + f\n * 24.选中数行，整体往后移动：tab\n * 25.选中数行，整体往前移动：shift + tab\n * 26.在当前类中，显示类结构，并支持搜索指定的方法、属性等：ctrl + o\n * 27.批量修改指定的变量名、方法名、类名等：alt + shift + r\n * 28.选中的结构的大小写的切换：变成大写： ctrl + shift + x\n * 29.选中的结构的大小写的切换：变成小写：ctrl + shift + y\n * 30.调出生成getter/setter/构造器等结构： alt + shift + s\n * 31.显示当前选择资源(工程 or 文件)的属性：alt + enter\n * 32.快速查找：参照选中的Word快速定位到下一个 ：ctrl + k\n * \n * 33.关闭当前窗口：ctrl + w\n * 34.关闭所有的窗口：ctrl + shift + w\n * 35.查看指定的结构使用过的地方：ctrl + alt + g\n * 36.查找与替换：ctrl + f\n * 37.最大化当前的View：ctrl + m\n * 38.直接定位到当前行的首位：home\n * 39.直接定位到当前行的末位：end\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"java中的junit单元测试\"><a class=\"markdownIt-Anchor\" href=\"#java中的junit单元测试\">#</a> Java 中的 JUnit 单元测试</h2>\n<p>步骤：</p>\n<p>1. 选中当前工程 - 右键选择：build path - add libraries - JUnit 4 - 下一步</p>\n<p>2. 创建 Java 类，进行单元测试。</p>\n<p>此时的 Java 类要求：① 此类是 public 的  ②此类提供公共的无参的构造器</p>\n<p>3. 此类中声明单元测试方法。</p>\n<p>此时的单元测试方法：方法的权限是 public, 没有返回值，没有形参</p>\n<p>4. 此单元测试方法上需要声明注解：@Test, 并在单元测试类中导入：import org.junit.Test;</p>\n<p>5. 声明好单元测试方法以后，就可以在方法体内测试相关的代码。</p>\n<p>6. 写完代码以后，左键双击单元测试方法名，右键：run as - JUnit Test</p>\n<p>说明：</p>\n<p>1. 如果执行结果没有任何异常：绿条</p>\n<p>2. 如果执行结果出现异常：红条</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2021/01/09/2-java-ji-ben-yu-fa/",
            "url": "http://fsh010816.github.io/2021/01/09/2-java-ji-ben-yu-fa/",
            "title": "2_Java基本语法",
            "date_published": "2021-01-09T02:11:52.000Z",
            "content_html": "<h1 id=\"java基本语法\"><a class=\"markdownIt-Anchor\" href=\"#java基本语法\">#</a> Java 基本语法</h1>\n<h2 id=\"关键字与保留字\"><a class=\"markdownIt-Anchor\" href=\"#关键字与保留字\">#</a> 关键字与保留字</h2>\n<h3 id=\"关键字\"><a class=\"markdownIt-Anchor\" href=\"#关键字\">#</a> 关键字</h3>\n<p><strong>定义</strong>：被 Java 语言赋予了特殊含义，用做专门用途的字符串（单词）<br>\n<strong>特点</strong>：关键字中所有字母都为小写</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210301165754796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210301165754885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h3 id=\"保留字\"><a class=\"markdownIt-Anchor\" href=\"#保留字\">#</a> 保留字</h3>\n<p><strong>Java 保留字</strong>：现有 Java 版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字<br>\n goto 、const</p>\n<h2 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h2>\n<h3 id=\"标识符-2\"><a class=\"markdownIt-Anchor\" href=\"#标识符-2\">#</a> 标识符</h3>\n<p>Java 对各种 变量、 方法和类等要素命名时使用的字符序列称为标识符<br>\n技巧：凡是自己可以起名字的地方都叫标识符</p>\n<h3 id=\"定义合法标识符规则\"><a class=\"markdownIt-Anchor\" href=\"#定义合法标识符规则\">#</a> 定义合法标识符规则：</h3>\n<ol>\n<li>由 26 个英文字母大小写，0-9  ，_或 $ 组成</li>\n<li>数字不可以开头。</li>\n<li>不可以使用关键字和保留字，但能包含关键字和保留字。</li>\n<li>Java 中严格区分大小写，长度无限制。</li>\n<li>标识符不能包含空格</li>\n</ol>\n<h3 id=\"java中的名称命名规范\"><a class=\"markdownIt-Anchor\" href=\"#java中的名称命名规范\">#</a> Java 中的名称命名规范</h3>\n<ol>\n<li>包名：多单词组成时所有字母都小写：xxxyyyzzz</li>\n<li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</li>\n<li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</li>\n<li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li>\n</ol>\n<h2 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h2>\n<h3 id=\"变量-2\"><a class=\"markdownIt-Anchor\" href=\"#变量-2\">#</a> 变量</h3>\n<ol>\n<li>内存中的一个存储区域</li>\n<li>该区域的数据可以在同一类型范围内不断变化</li>\n<li>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值</li>\n</ol>\n<p>作用：用于在内存中保存数据</p>\n<h3 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h3>\n<ul>\n<li>Java 中每个变量必须先声明，后使用</li>\n<li>使用变量名来访问这块区域的数据</li>\n<li>变量的作用域：其定义所在的一对 { } 内</li>\n<li>变量只有在其作用域内才有效</li>\n<li>同一个作用域内，不能定义重名的变量</li>\n</ul>\n<h3 id=\"声明-赋值\"><a class=\"markdownIt-Anchor\" href=\"#声明-赋值\">#</a> 声明 赋值</h3>\n<p>声明变量<br>\n语法：&lt;数据类型&gt; &lt; 变量名称 &gt;<br>\n 例如：int var;<br>\n 变量的赋值<br>\n语法：&lt;变量名称&gt; = &lt; 值 &gt;<br>\n 例如：var = 10;<br>\n 声明和赋值变量<br>\n语法： &lt;数据类型&gt; &lt; 变量名 &gt; = &lt; 初始化值 &gt;<br>\n 例如：int var = 10;</p>\n<h3 id=\"变量的分类\"><a class=\"markdownIt-Anchor\" href=\"#变量的分类\">#</a> 变量的分类</h3>\n<h4 id=\"按数据类型\"><a class=\"markdownIt-Anchor\" href=\"#按数据类型\">#</a> 按数据类型</h4>\n<p><img src=\"https://img-blog.csdnimg.cn/20210109211327831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70\" alt=\"数据类型分类\"></p>\n<h4 id=\"按声明的位置的不同\"><a class=\"markdownIt-Anchor\" href=\"#按声明的位置的不同\">#</a> 按声明的位置的不同</h4>\n<p>在方法体外，类体内声明的变量称为成员变量 。<br>\n在方法体内部声明的变量称为局部变量 。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210109211850402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"按声明的位置的不同\"></p>\n<p>● 注意：二者在初始化值方面的异同:<br>\n 同：都有生命周期 异：局部变量除形参外，需显式初始化</p>\n<h2 id=\"整数类型\"><a class=\"markdownIt-Anchor\" href=\"#整数类型\">#</a> 整数类型</h2>\n<p>java 的整型常量默认为 int 型，声明 long 型常量须后加‘l’或‘L’</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210109212151917.png#pic_center\" alt=\"整数\"></p>\n<h2 id=\"浮点类型\"><a class=\"markdownIt-Anchor\" href=\"#浮点类型\">#</a> 浮点类型</h2>\n<p>浮点型常量有两种表示形式：<br>\n①十进制数形式：如：5.12 512.0f .512 (必须有小数点）<br>\n②科学计数法形式：如：5.12e2 512E2 100E-2<br>\nfloat: 单精度，尾数可以精确到 7 位有效数字。很多情况下，精度很难满足需求。<br>\ndouble: 双精度，精度是 float 的两倍。通常采用此类型。<br>\nJava 的浮点型常量默认为 double 型，声明 float 型常量，须后加‘f’ 或‘F’ 。</p>\n<p>float 表示数值的范围比 long 还大</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210110010352218.png\" alt=\"浮点类型\"></p>\n<h2 id=\"字符类型\"><a class=\"markdownIt-Anchor\" href=\"#字符类型\">#</a> 字符类型</h2>\n<ul>\n<li>char 型数据用来表示通常意义上 “字符”(2 字节)</li>\n<li>Java 中的所有字符都使用 Unicode 编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</li>\n<li>char 类型是可以进行运算的。因为它都对应有 Unicode 码。</li>\n</ul>\n<h3 id=\"字符型变量的三种表现形式\"><a class=\"markdownIt-Anchor\" href=\"#字符型变量的三种表现形式\">#</a> 字符型变量的三种表现形式</h3>\n<ol>\n<li>字符常量是用单引号 (‘ ’) 括起来的单个字符。例如：char c1 = ‘a’; char c2= ‘中’; char c3 = ‘9’;</li>\n<li>Java 中还允许使用转义字符‘\\’来将其后的字符转变为特殊字符型常量。例如：char c3 = ‘\\n’; // '\\n’表示换行符</li>\n<li>直接使用 Unicode 值来表示字符型常量：‘\\uXXXX’。其中，XXXX 代表一个十六进制整数。如：\\u000a 表示 \\n。</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20210110010352220.png\" alt=\"转义字符\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token number\">97</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//开发中非常少见，输出的话是'a'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"布尔类型\"><a class=\"markdownIt-Anchor\" href=\"#布尔类型\">#</a> 布尔类型</h2>\n<p>Java 虚拟机中没有任何供 boolean 值专用的字节码指令，Java 语言表达所操作的 boolean 值，在编译之后都使用 java 虚拟机中的 int 数据类型来代替：true 用 1 表示，false 用 0 表示。</p>\n<h2 id=\"基本数据类型转换\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型转换\">#</a> 基本数据类型转换</h2>\n<h3 id=\"自动类型转换\"><a class=\"markdownIt-Anchor\" href=\"#自动类型转换\">#</a> 自动类型转换</h3>\n<p>容量小的类型自动转换为容量大的数据类型。数据类型按容量大小排序为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210110010619749.png#pic_center\" alt=\"自动类型转换\"></p>\n<ul>\n<li>byte,short,char 之间不会相互转换，他们三者在计算时首先转换为 int 类型。</li>\n<li>boolean 类型不能与其它数据类型运算。</li>\n<li>当把任何基本数据类型的值和字符串 (String) 进行连接运算时 (+)，基本数据类型的值将自动转化为字符串 (String) 类型。</li>\n</ul>\n<h3 id=\"强制类型转换\"><a class=\"markdownIt-Anchor\" href=\"#强制类型转换\">#</a> 强制类型转换</h3>\n<p>强制转换符：()</p>\n<p>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。</p>\n<p>boolean 类型不可以转换为其它的数据类型。</p>\n<h2 id=\"字符串类型\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型\">#</a> 字符串类型</h2>\n<p>使用方式与基本数据类型一致。例如：String str = “abcd”;<br>\n 一个字符串可以串接另一个字符串，也可以直接串接其他类型的数据。</p>\n<h2 id=\"进制\"><a class=\"markdownIt-Anchor\" href=\"#进制\">#</a> 进制</h2>\n<p>二进制 (binary) ：0,1 ，满 2 进 1. 以 0b 或 0B 开头。<br>\n八进制 (octal) ：0-7 ，满 8 进 1. 以数字 0 开头表示。<br>\n十六进制 (hex) ：0-9 及 A-F，满 16 进 1. 以 0x 或 0X 开头表示</p>\n<h2 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p>\n<ul>\n<li>算术运算符</li>\n<li>赋值运算符</li>\n<li>比较运算符（关系运算符）</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n<li>三元运算符</li>\n</ul>\n<h3 id=\"算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#算术运算符\">#</a> 算术运算符</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20210110010352199.png\" alt=\"算术运算符\"></p>\n<p>% 取余运算，结果的符号与被模数的符号相同</p>\n<p>自增 1 不会改变本身变量的数据类型</p>\n<h3 id=\"赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h3>\n<p>符号：=  支持连续赋值。</p>\n<p>+= 不会改变变量本身的数据类型</p>\n<h3 id=\"比较运算符\"><a class=\"markdownIt-Anchor\" href=\"#比较运算符\">#</a> 比较运算符</h3>\n<p>比较运算符的结果都是 boolean 型，也就是要么是 true，要么是 false。</p>\n<p>instanceof 检查是否是类的对象 “Hello” instanceof String //true</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h3>\n<p>&amp;— 逻辑与   | — 逻辑或    ！— 逻辑非     &amp;&amp; — 短路与    || — 短路或    ^ — 逻辑异或</p>\n<p>逻辑运算符用于连接布尔型表达式</p>\n<p>“&amp;” 和 “&amp;&amp;” 的区别：<br>\n①: 单 &amp; 时，左边无论真假，右边都进行运算；<br>\n②: 双 &amp; 时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。</p>\n<p>开发中，推荐使用 &amp;&amp;</p>\n<h3 id=\"位运算符\"><a class=\"markdownIt-Anchor\" href=\"#位运算符\">#</a> 位运算符</h3>\n<p>位运算是直接对整数的二进制进行的运算</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210301171621607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<img src=\"https://img-blog.csdnimg.cn/20210301171801279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" style=\"zoom:80%;\">\n<h3 id=\"三元运算符\"><a class=\"markdownIt-Anchor\" href=\"#三元运算符\">#</a> 三元运算符</h3>\n<p>(条件表达式)? 表达式 1 ：表达式 2</p>\n<p>表达式 1 和表达式 2 要求是一致的</p>\n<h2 id=\"运算符的优先级\"><a class=\"markdownIt-Anchor\" href=\"#运算符的优先级\">#</a> 运算符的优先级</h2>\n<p>只有单目运算符、三元运算符、赋值运算符是从右向左运算的。</p>\n<img src=\"https://img-blog.csdnimg.cn/20210301171952306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" style=\"zoom:50%;\">\n<h2 id=\"程序流程控制\"><a class=\"markdownIt-Anchor\" href=\"#程序流程控制\">#</a> 程序流程控制</h2>\n<ul>\n<li>顺序结构</li>\n<li>分支结构</li>\n<li>循环结构</li>\n</ul>\n<h3 id=\"scanner\"><a class=\"markdownIt-Anchor\" href=\"#scanner\">#</a> Scanner</h3>\n<p>1 &gt; 导包</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2&gt;Scanner 的实例化</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Scanner</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>3 &gt; 调用 Scanner 类的相关方法，来获取指定类型的变量</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>对于 char 型的获取，Scanner 没有提供相应的方法</p>\n<h3 id=\"switch-case\"><a class=\"markdownIt-Anchor\" href=\"#switch-case\">#</a> switch-case</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> 常量<span class=\"token number\">1</span><span class=\"token operator\">:</span>\n        语句<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// break;</span>\n    <span class=\"token keyword\">case</span> 常量<span class=\"token number\">2</span><span class=\"token operator\">:</span>\n        语句<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// break;</span>\n    … …\n    <span class=\"token keyword\">case</span> 常量<span class=\"token class-name\">N</span><span class=\"token operator\">:</span>\n        语句<span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// break;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        语句<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// break;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>1&gt;break 语句用来在执行完一个 case 分支后使程序跳出 switch 语句块；如果没有 break，程序会顺序执行到 switch 结尾</p>\n<p>2&gt;switch (表达式) 中表达式的值 必须是下述几种类型之一：byte ，short,char ，int， 枚举 (jdk 5.0) ，String (jdk 7.0)；</p>\n<p>3&gt; default 子句是可任选的。同时，位置也是灵活的。当没有匹配的 case 时，执行 default</p>\n<p>4 &gt; 如果 switch-case 结构中的多个 case 执行语句相同，则可以考虑进行合并</p>\n<h3 id=\"循环结构\"><a class=\"markdownIt-Anchor\" href=\"#循环结构\">#</a> 循环结构</h3>\n<ol>\n<li>for 循环</li>\n<li>while 循环</li>\n<li>do-while 循环</li>\n</ol>\n<p>循环语句的四个组成部分<br>\n①初始化部分 (init_statement)<br>\n②循环条件部分 (test_exp)<br>\n③循环体部分 (body_statement)<br>\n④迭代部分 (alter_statement)</p>\n<h4 id=\"for循环\"><a class=\"markdownIt-Anchor\" href=\"#for循环\">#</a> for 循环</h4>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>①初始化部分<span class=\"token punctuation\">;</span> ②循环条件部分<span class=\"token punctuation\">;</span> ④迭代部分<span class=\"token punctuation\">)</span>｛\n\t③循环体部分<span class=\"token punctuation\">;</span>\n｝<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔<br>\n④可以有多个变量更新，用逗号分隔</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ForTest</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tsum<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\tsum<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n错误：可能尚未初始化变量sum<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"while循环\"><a class=\"markdownIt-Anchor\" href=\"#while循环\">#</a> while 循环</h4>\n<p>①初始化部分<br>\n while (②循环条件部分)｛<br>\n③循环体部分；<br>\n④迭代部分；<br>\n}</p>\n<p>for 和 while 区别：初始化条件部分的作用范围不同</p>\n<h4 id=\"do-while\"><a class=\"markdownIt-Anchor\" href=\"#do-while\">#</a> do-while</h4>\n<p>①初始化部分；<br>\ndo{<br>\n③循环体部分<br>\n④迭代部分<br>\n} while (②循环条件部分);</p>\n<p>do-while 循环至少执行一次循环体</p>\n<h3 id=\"最简单无限循环\"><a class=\"markdownIt-Anchor\" href=\"#最简单无限循环\">#</a> 最简单 “无限” 循环</h3>\n<p>最简单 “无限” ”  循环： 格式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>无限循环存在的原因是并不知道循环多少次， 需要根据循环体内部某些条件，来控制循环的结束</p>\n<h3 id=\"currenttimemillis\"><a class=\"markdownIt-Anchor\" href=\"#currenttimemillis\">#</a> currentTimeMillis()</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> start<span class=\"token operator\">=</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"break-continue\"><a class=\"markdownIt-Anchor\" href=\"#break-continue\">#</a> break continue</h3>\n<p>break 语句用于终止某个语句块的执行，结束当前循环</p>\n<p>{   ……<br>\nbreak;<br>\n……<br>\n}</p>\n<p>continue 语句用于跳过其所在循环语句块的一次执行，继续下一次循环，结束当次循环</p>\n<p>两个关键字后面都不能声明执行语句，会报错</p>\n<p>1&gt;break 只能用于 switch 语句和循环语句中。<br>\n2&gt;continue 只能用于循环语句中。</p>\n<h4 id=\"label\"><a class=\"markdownIt-Anchor\" href=\"#label\">#</a> label</h4>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LabelTest</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tlabel<span class=\"token operator\">:</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">continue</span> label<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"return\"><a class=\"markdownIt-Anchor\" href=\"#return\">#</a> return</h3>\n<p>return：并非专门用于结束循环的，它的功能是结束一个方法。当一个方法执行到一个 return 语句时，这个方法将被结束。</p>\n<p>与 break 和 continue 不同的是，return 直接结束整个方法，不管这个 return 处于多少层循环之内</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2021/01/08/1-java-yu-yan-gai-shu/",
            "url": "http://fsh010816.github.io/2021/01/08/1-java-yu-yan-gai-shu/",
            "title": "1_Java语言概述",
            "date_published": "2021-01-08T11:52:47.000Z",
            "content_html": "<h1 id=\"java语言概述\"><a class=\"markdownIt-Anchor\" href=\"#java语言概述\">#</a> Java 语言概述</h1>\n<h2 id=\"jdk-jre\"><a class=\"markdownIt-Anchor\" href=\"#jdk-jre\">#</a> JDK JRE</h2>\n<p>・JDK = JRE + 开发工具集（例如 Javac 编译工具等）<br>\n・JRE = JVM + Java SE 标准类库</p>\n<h3 id=\"jdk\"><a class=\"markdownIt-Anchor\" href=\"#jdk\">#</a> JDK</h3>\n<p>JDK (Java Development Kit Java 开发工具包)</p>\n<p>JDK 是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，也包括了 JRE。所以安装了 JDK，就不用在单独安装 JRE 了。其中的开发工具：编译工具 (javac.exe)  打包工具 (jar.exe) 等</p>\n<h3 id=\"jre\"><a class=\"markdownIt-Anchor\" href=\"#jre\">#</a> JRE</h3>\n<p>JRE (Java Runtime Environment Java 运行环境)</p>\n<p>包括 Java 虚拟机 (JVM Java Virtual Machine) 和 Java 程序所需的核心类库等，如果想要运行一个开发好的 Java 程序，计算机中只需要安装 JRE 即可</p>\n<h2 id=\"jdk安装\"><a class=\"markdownIt-Anchor\" href=\"#jdk安装\">#</a> JDK 安装</h2>\n<p>安装时会跳出安装 jre。</p>\n<h3 id=\"环境变量\"><a class=\"markdownIt-Anchor\" href=\"#环境变量\">#</a> 环境变量</h3>\n<p>path：windows 系统执行命令时要搜寻的路径。</p>\n<p>JAVA_HOME:bin 的上一层目录</p>\n<p>path:%JAVA_HOME%\\bin</p>\n<h2 id=\"第一个java程序\"><a class=\"markdownIt-Anchor\" href=\"#第一个java程序\">#</a> 第一个 Java 程序</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20210109001413925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg1Mjk5Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"avatar\"></p>\n<p>字节码文件名是类名</p>\n<h2 id=\"注释\"><a class=\"markdownIt-Anchor\" href=\"#注释\">#</a> 注释</h2>\n<p>1.// 单行</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<p>/*</p>\n<p>多行</p>\n<p>*/</p>\n<ol start=\"3\">\n<li></li>\n</ol>\n<p>/**</p>\n<p>文档注释</p>\n<p>*/</p>\n<p>注释内容可以被 JDK 提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">javadoc <span class=\"token operator\">-</span>encoding UTF<span class=\"token operator\">-</span><span class=\"token number\">8</span> <span class=\"token operator\">-</span>charset UTF<span class=\"token operator\">-</span><span class=\"token number\">8</span> <span class=\"token operator\">-</span>d myHello <span class=\"token operator\">-</span>author <span class=\"token operator\">-</span>version <span class=\"token class-name\">HelloJava</span><span class=\"token punctuation\">.</span>java\n<span class=\"token comment\">//myHello是要生成的文件夹的名字</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"api\"><a class=\"markdownIt-Anchor\" href=\"#api\">#</a> API</h2>\n<p>API （Application Programming Interface, 应用程序编程接口）是 Java 提供的基本编程接口。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>1. 在一个 Java 源文件中可以声明多个 class, 只能有一个声明为 public 的，而且声明为 public 的类的类命必须与源文件名相同。</p>\n<p>2. 程序的入口是 main 方法</p>\n<p>3. 编译后，会生成一个或多个字节码文件，字节码文件的文件名与 Java 源文件中的类名相同</p>\n<h2 id=\"ide\"><a class=\"markdownIt-Anchor\" href=\"#ide\">#</a> IDE</h2>\n<p>Integrated Development Environment</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://fsh010816.github.io/2020/12/18/hello-world/",
            "url": "http://fsh010816.github.io/2020/12/18/hello-world/",
            "title": "Hello World",
            "date_published": "2020-12-18T12:06:13.968Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}